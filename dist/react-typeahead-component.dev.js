(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Typeahead = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
(function (process){
'use strict';

var React = window.React || require('react');

module.exports = React.createClass({
    displayName: 'Aria Status',

    propTypes: process.env.NODE_ENV === 'production' ? {} : {
        message: React.PropTypes.string
    },

    componentDidMount: function() {
        var _this = this;

        // This is needed as `componentDidUpdate`
        // does not fire on the initial render.
        _this.setTextContent(_this.props.message);
    },

    componentDidUpdate: function() {
        var _this = this;

        _this.setTextContent(_this.props.message);
    },

    render: function() {
        return (
            React.createElement("span", {
                role: "status", 
                "aria-live": "polite", 
                style: {
                    left: '-9999px',
                    position: 'absolute'
                }}
            )
        );
    },

    // We cannot set `textContent` directly in `render`,
    // because React adds/deletes text nodes when rendering,
    // which confuses screen readers and doesn't cause them to read changes.
    setTextContent: function(textContent) {
        // We could set `innerHTML`, but it's better to avoid it.
        this.getDOMNode().textContent = textContent || '';
    }
});

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdzdHVja2kvQ29kZS9yZWFjdC10eXBlYWhlYWQtY29tcG9uZW50L3NyYy9jb21wb25lbnRzL2FyaWFfc3RhdHVzLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsWUFBWSxDQUFDOztBQUViLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQzs7QUFFN0IsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ25DLElBQUksV0FBVyxFQUFFLGFBQWE7O0lBRTFCLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxZQUFZLEdBQUcsRUFBRSxHQUFHO1FBQ3BELE9BQU8sRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU07QUFDdkMsS0FBSzs7SUFFRCxpQkFBaUIsRUFBRSxXQUFXO0FBQ2xDLFFBQVEsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBQ3pCO0FBQ0E7O1FBRVEsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2xELEtBQUs7O0lBRUQsa0JBQWtCLEVBQUUsV0FBVztBQUNuQyxRQUFRLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQzs7UUFFakIsS0FBSyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2xELEtBQUs7O0lBRUQsTUFBTSxFQUFFLFdBQVc7UUFDZjtZQUNJLG9CQUFBLE1BQUssRUFBQSxDQUFBO2dCQUNELElBQUEsRUFBSSxDQUFDLFFBQUEsRUFBUTtnQkFDYixXQUFBLEVBQVMsQ0FBQyxRQUFBLEVBQVE7Z0JBQ2xCLEtBQUEsRUFBSyxDQUFFO29CQUNILElBQUksRUFBRSxTQUFTO29CQUNmLFFBQVEsRUFBRSxVQUFVO2lCQUN0QixDQUFBO1lBQ0osQ0FBQTtVQUNKO0FBQ1YsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLGNBQWMsRUFBRSxTQUFTLFdBQVcsRUFBRTs7UUFFbEMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLFdBQVcsR0FBRyxXQUFXLElBQUksRUFBRSxDQUFDO0tBQ3JEO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgIGRpc3BsYXlOYW1lOiAnQXJpYSBTdGF0dXMnLFxuXG4gICAgcHJvcFR5cGVzOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nID8ge30gOiB7XG4gICAgICAgIG1lc3NhZ2U6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmdcbiAgICB9LFxuXG4gICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIC8vIFRoaXMgaXMgbmVlZGVkIGFzIGBjb21wb25lbnREaWRVcGRhdGVgXG4gICAgICAgIC8vIGRvZXMgbm90IGZpcmUgb24gdGhlIGluaXRpYWwgcmVuZGVyLlxuICAgICAgICBfdGhpcy5zZXRUZXh0Q29udGVudChfdGhpcy5wcm9wcy5tZXNzYWdlKTtcbiAgICB9LFxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBfdGhpcy5zZXRUZXh0Q29udGVudChfdGhpcy5wcm9wcy5tZXNzYWdlKTtcbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgcm9sZT0nc3RhdHVzJ1xuICAgICAgICAgICAgICAgIGFyaWEtbGl2ZT0ncG9saXRlJ1xuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6ICctOTk5OXB4JyxcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgLy8gV2UgY2Fubm90IHNldCBgdGV4dENvbnRlbnRgIGRpcmVjdGx5IGluIGByZW5kZXJgLFxuICAgIC8vIGJlY2F1c2UgUmVhY3QgYWRkcy9kZWxldGVzIHRleHQgbm9kZXMgd2hlbiByZW5kZXJpbmcsXG4gICAgLy8gd2hpY2ggY29uZnVzZXMgc2NyZWVuIHJlYWRlcnMgYW5kIGRvZXNuJ3QgY2F1c2UgdGhlbSB0byByZWFkIGNoYW5nZXMuXG4gICAgc2V0VGV4dENvbnRlbnQ6IGZ1bmN0aW9uKHRleHRDb250ZW50KSB7XG4gICAgICAgIC8vIFdlIGNvdWxkIHNldCBgaW5uZXJIVE1MYCwgYnV0IGl0J3MgYmV0dGVyIHRvIGF2b2lkIGl0LlxuICAgICAgICB0aGlzLmdldERPTU5vZGUoKS50ZXh0Q29udGVudCA9IHRleHRDb250ZW50IHx8ICcnO1xuICAgIH1cbn0pO1xuIl19
},{"_process":1,"react":"react"}],3:[function(require,module,exports){
(function (process){
'use strict';

var React = window.React || require('react');

module.exports = React.createClass({
    displayName: 'Input',

    propTypes: process.env.NODE_ENV === 'production' ? {} : {
        value: React.PropTypes.string,
        onChange: React.PropTypes.func
    },

    getDefaultProps: function() {
        return {
            value: '',
            onChange: function() {}
        };
    },

    componentDidUpdate: function() {
        var _this = this,
            dir = _this.props.dir;

        if (dir === null || dir === undefined) {
            // When setting an attribute to null/undefined,
            // React instead sets the attribute to an empty string.

            // This is not desired because of a possible bug in Chrome.
            // If the page is RTL, and the input's `dir` attribute is set
            // to an empty string, Chrome assumes LTR, which isn't what we want.
            React.findDOMNode(_this).removeAttribute('dir');
        }
    },

    render: function() {
        var _this = this;

        return (
            React.createElement("input", React.__spread({}, 
                _this.props, 
                {onChange: _this.handleChange})
            )
        );
    },

    handleChange: function(event) {
        var props = this.props;

        // There are several React bugs in IE,
        // where the `input`'s `onChange` event is
        // fired even when the value didn't change.
        // https://github.com/facebook/react/issues/2185
        // https://github.com/facebook/react/issues/3377
        if (event.target.value !== props.value) {
            props.onChange(event);
        }
    },

    blur: function() {
        React.findDOMNode(this).blur();
    },

    isCursorAtEnd: function() {
        var _this = this,
            inputDOMNode = React.findDOMNode(_this),
            valueLength = _this.props.value.length;

        return inputDOMNode.selectionStart === valueLength &&
               inputDOMNode.selectionEnd === valueLength;
    }
});

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hbmRyZXdzdHVja2kvQ29kZS9yZWFjdC10eXBlYWhlYWQtY29tcG9uZW50L3NyYy9jb21wb25lbnRzL2lucHV0LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsWUFBWSxDQUFDOztBQUViLElBQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQzs7QUFFN0IsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0FBQ25DLElBQUksV0FBVyxFQUFFLE9BQU87O0lBRXBCLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxZQUFZLEdBQUcsRUFBRSxHQUFHO1FBQ3BELEtBQUssRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU07UUFDN0IsUUFBUSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSTtBQUN0QyxLQUFLOztJQUVELGVBQWUsRUFBRSxXQUFXO1FBQ3hCLE9BQU87WUFDSCxLQUFLLEVBQUUsRUFBRTtZQUNULFFBQVEsRUFBRSxXQUFXLEVBQUU7U0FDMUIsQ0FBQztBQUNWLEtBQUs7O0lBRUQsa0JBQWtCLEVBQUUsV0FBVztRQUMzQixJQUFJLEtBQUssR0FBRyxJQUFJO0FBQ3hCLFlBQVksR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOztBQUVsQyxRQUFRLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxHQUFHLEtBQUssU0FBUyxFQUFFO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O1lBRVksS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkQ7QUFDVCxLQUFLOztJQUVELE1BQU0sRUFBRSxXQUFXO0FBQ3ZCLFFBQVEsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDOztRQUVqQjtZQUNJLG9CQUFBLE9BQU0sRUFBQSxnQkFBQSxHQUFBO2dCQUNELEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBQztnQkFDaEIsQ0FBQSxRQUFBLEVBQVEsQ0FBRSxLQUFLLENBQUMsWUFBYSxDQUFBLENBQUE7WUFDL0IsQ0FBQTtVQUNKO0FBQ1YsS0FBSzs7SUFFRCxZQUFZLEVBQUUsU0FBUyxLQUFLLEVBQUU7QUFDbEMsUUFBUSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O1FBRVEsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQ3BDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekI7QUFDVCxLQUFLOztJQUVELElBQUksRUFBRSxXQUFXO1FBQ2IsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUN2QyxLQUFLOztJQUVELGFBQWEsRUFBRSxXQUFXO1FBQ3RCLElBQUksS0FBSyxHQUFHLElBQUk7WUFDWixZQUFZLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7QUFDbkQsWUFBWSxXQUFXLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDOztRQUUzQyxPQUFPLFlBQVksQ0FBQyxjQUFjLEtBQUssV0FBVztlQUMzQyxZQUFZLENBQUMsWUFBWSxLQUFLLFdBQVcsQ0FBQztLQUNwRDtDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ0lucHV0JyxcblxuICAgIHByb3BUeXBlczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA/IHt9IDoge1xuICAgICAgICB2YWx1ZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgb25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG4gICAgfSxcblxuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogJycsXG4gICAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24oKSB7fVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgICAgZGlyID0gX3RoaXMucHJvcHMuZGlyO1xuXG4gICAgICAgIGlmIChkaXIgPT09IG51bGwgfHwgZGlyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIFdoZW4gc2V0dGluZyBhbiBhdHRyaWJ1dGUgdG8gbnVsbC91bmRlZmluZWQsXG4gICAgICAgICAgICAvLyBSZWFjdCBpbnN0ZWFkIHNldHMgdGhlIGF0dHJpYnV0ZSB0byBhbiBlbXB0eSBzdHJpbmcuXG5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgbm90IGRlc2lyZWQgYmVjYXVzZSBvZiBhIHBvc3NpYmxlIGJ1ZyBpbiBDaHJvbWUuXG4gICAgICAgICAgICAvLyBJZiB0aGUgcGFnZSBpcyBSVEwsIGFuZCB0aGUgaW5wdXQncyBgZGlyYCBhdHRyaWJ1dGUgaXMgc2V0XG4gICAgICAgICAgICAvLyB0byBhbiBlbXB0eSBzdHJpbmcsIENocm9tZSBhc3N1bWVzIExUUiwgd2hpY2ggaXNuJ3Qgd2hhdCB3ZSB3YW50LlxuICAgICAgICAgICAgUmVhY3QuZmluZERPTU5vZGUoX3RoaXMpLnJlbW92ZUF0dHJpYnV0ZSgnZGlyJyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgey4uLl90aGlzLnByb3BzfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtfdGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICBoYW5kbGVDaGFuZ2U6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgLy8gVGhlcmUgYXJlIHNldmVyYWwgUmVhY3QgYnVncyBpbiBJRSxcbiAgICAgICAgLy8gd2hlcmUgdGhlIGBpbnB1dGAncyBgb25DaGFuZ2VgIGV2ZW50IGlzXG4gICAgICAgIC8vIGZpcmVkIGV2ZW4gd2hlbiB0aGUgdmFsdWUgZGlkbid0IGNoYW5nZS5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8yMTg1XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMzM3N1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlICE9PSBwcm9wcy52YWx1ZSkge1xuICAgICAgICAgICAgcHJvcHMub25DaGFuZ2UoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGJsdXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICBSZWFjdC5maW5kRE9NTm9kZSh0aGlzKS5ibHVyKCk7XG4gICAgfSxcblxuICAgIGlzQ3Vyc29yQXRFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgICAgaW5wdXRET01Ob2RlID0gUmVhY3QuZmluZERPTU5vZGUoX3RoaXMpLFxuICAgICAgICAgICAgdmFsdWVMZW5ndGggPSBfdGhpcy5wcm9wcy52YWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIGlucHV0RE9NTm9kZS5zZWxlY3Rpb25TdGFydCA9PT0gdmFsdWVMZW5ndGggJiZcbiAgICAgICAgICAgICAgIGlucHV0RE9NTm9kZS5zZWxlY3Rpb25FbmQgPT09IHZhbHVlTGVuZ3RoO1xuICAgIH1cbn0pO1xuIl19
},{"_process":1,"react":"react"}],4:[function(require,module,exports){
(function (process){
'use strict';

var React = window.React || require('react'),
    Input = require('./input.jsx'),
    AriaStatus = require('./aria_status.jsx'),
    getTextDirection = require('../utils/get_text_direction'),
    noop = function() {};

module.exports = React.createClass({
    displayName: 'Typeahead',

    statics: {
        getInstanceCount: (function() {
            var count = 0;

            return function() {
                return ++count;
            };
        }())
    },

    propTypes: process.env.NODE_ENV === 'production' ? {} : {
        inputId: React.PropTypes.string,
        inputName: React.PropTypes.string,
        className: React.PropTypes.string,
        nestedClassName: React.PropTypes.string,
        autoFocus: React.PropTypes.bool,
        hoverSelect: React.PropTypes.bool,
        inputValue: React.PropTypes.string,
        options: React.PropTypes.array,
        placeholder: React.PropTypes.string,
        onChange: React.PropTypes.func,
        onKeyDown: React.PropTypes.func,
        onKeyPress: React.PropTypes.func,
        onKeyUp: React.PropTypes.func,
        onFocus: React.PropTypes.func,
        onBlur: React.PropTypes.func,
        onSelect: React.PropTypes.func,
        onInputClick: React.PropTypes.func,
        handleHint: React.PropTypes.func,
        onComplete: React.PropTypes.func,
        onOptionClick: React.PropTypes.func,
        onOptionChange: React.PropTypes.func,
        onDropdownOpen: React.PropTypes.func,
        onDropdownClose: React.PropTypes.func,
        optionTemplate: React.PropTypes.func.isRequired,
        getMessageForOption: React.PropTypes.func,
        getMessageForIncomingOptions: React.PropTypes.func
    },

    getDefaultProps: function() {
        return {
            className: '',
            nestedClassName: '',
            inputValue: '',
            options: [],
            hoverSelect: true,
            onFocus: noop,
            onKeyDown: noop,
            onChange: noop,
            onInputClick: noop,
            handleHint: function() {
                return '';
            },
            onOptionClick: noop,
            onOptionChange: noop,
            onComplete:  noop,
            onDropdownOpen: noop,
            onDropdownClose: noop,
            getMessageForOption: function() {
                return '';
            },
            getMessageForIncomingOptions: function(number) {
                return (
                    number + ' suggestions are available. Use up and down arrows to select.'
                );
            }
        };
     },

    getInitialState: function() {
        return {
            selectedIndex: -1,
            isHintVisible: false,
            isDropdownVisible: false
        };
    },

    componentWillMount: function() {
        var _this = this,
            uniqueId = this.constructor.getInstanceCount();

        _this.userInputValue = null;
        _this.previousInputValue = null;
        _this.activeDescendantId = 'react-typeahead-activedescendant-' + uniqueId;
        _this.optionsId = 'react-typeahead-options-' + uniqueId;
    },

    componentDidMount: function() {
        var addEvent = window.addEventListener,
            handleWindowClose = this.handleWindowClose;

        // The `focus` event does not bubble, so we must capture it instead.
        // This closes Typeahead's dropdown whenever something else gains focus.
        addEvent('focus', handleWindowClose, true);

        // If we click anywhere outside of Typeahead, close the dropdown.
        addEvent('click', handleWindowClose, false);
    },

    componentWillUnmount: function() {
        var removeEvent = window.removeEventListener,
            handleWindowClose = this.handleWindowClose;

        removeEvent('focus', handleWindowClose, true);
        removeEvent('click', handleWindowClose, false);
    },

    componentWillReceiveProps: function(nextProps) {
        var nextValue = nextProps.inputValue,
            nextOptions = nextProps.options,
            valueLength = nextValue.length,
            isHintVisible = valueLength > 0 &&
                // A visible part of the hint must be
                // available for us to complete it.
                nextProps.handleHint(nextValue, nextOptions).slice(valueLength).length > 0;

        this.setState({
            isHintVisible: isHintVisible
        });
    },

    render: function() {
        var _this = this;

        return (
            React.createElement("div", {
                style: {
                    position: 'relative'
                }, 
                className: 'react-typeahead-container ' + _this.props.className}, 
                _this.renderInput(), 
                _this.renderDropdown(), 
                _this.renderAriaMessageForOptions(), 
                _this.renderAriaMessageForIncomingOptions()
            )
        );
    },

    renderInput: function() {
        var _this = this,
            state = _this.state,
            props = _this.props,
            inputValue = props.inputValue,
            className = 'react-typeahead-input',
            inputDirection = getTextDirection(inputValue);

        return (
            React.createElement("div", {
                style: {
                    position: 'relative'
                }, 
                className: "react-typeahead-input-container"}, 
                React.createElement(Input, {
                    disabled: true, 
                    role: "presentation", 
                    "aria-hidden": true, 
                    dir: inputDirection, 
                    className: className + ' react-typeahead-hint' + _this.props.nestedClassName, 
                    style: {
                        color: 'silver',
                        WebkitTextFillColor: 'silver',
                        position: 'absolute'
                    }, 
                    value: state.isHintVisible ? props.handleHint(inputValue, props.options) : null}
                ), 
                React.createElement(Input, {
                    ref: "input", 
                    role: "combobox", 
                    "aria-owns": _this.optionsId, 
                    "aria-expanded": state.isDropdownVisible, 
                    "aria-autocomplete": "both", 
                    "aria-activedescendant": _this.activeDescendantId, 
                    value: inputValue, 
                    spellCheck: false, 
                    autoComplete: false, 
                    autoCorrect: false, 
                    dir: inputDirection, 
                    onClick: _this.handleClick, 
                    onFocus: _this.handleFocus, 
                    onBlur: props.onBlur, 
                    onChange: _this.handleChange, 
                    onKeyDown: _this.handleKeyDown, 
                    id: props.inputId, 
                    name: props.inputName, 
                    autoFocus: props.autoFocus, 
                    placeholder: props.placeholder, 
                    onSelect: props.onSelect, 
                    onKeyUp: props.onKeyUp, 
                    onKeyPress: props.onKeyPress, 
                    className: className + ' react-typeahead-usertext' + _this.props.nestedClassName, 
                    style: {
                        position: 'relative',
                        background: 'transparent'
                    }}
                )
            )
        );
    },

    renderDropdown: function() {
        var _this = this,
            state = _this.state,
            props = _this.props,
            OptionTemplate = props.optionTemplate,
            selectedIndex = state.selectedIndex,
            isDropdownVisible = state.isDropdownVisible,
            activeDescendantId = _this.activeDescendantId;

        if (this.props.options.length < 1) {
            return null;
        }

        return (
            React.createElement("ul", {id: _this.optionsId, 
                ref: "dropdown", 
                role: "listbox", 
                "aria-hidden": !isDropdownVisible, 
                style: {
                    width: '100%',
                    background: '#fff',
                    position: 'absolute',
                    boxSizing: 'border-box',
                    display: isDropdownVisible ? 'block' : 'none'
                }, 
                className: "react-typeahead-options", 
                onMouseOut: this.handleMouseOut}, 
                
                    props.options.map(function(data, index) {
                        var isSelected = selectedIndex === index;

                        return (
                            React.createElement("li", {id: isSelected ? activeDescendantId : null, 
                                "aria-selected": isSelected, 
                                role: "option", 
                                key: index, 
                                onClick: _this.handleOptionClick.bind(_this, index), 
                                onMouseOver: _this.handleOptionMouseOver.bind(_this, index)}, 

                                React.createElement(OptionTemplate, {
                                    data: data, 
                                    index: index, 
                                    userInputValue: _this.userInputValue, 
                                    inputValue: props.inputValue, 
                                    isSelected: isSelected}
                                )
                            )
                        );
                    })
                
            )
        );
    },

    renderAriaMessageForOptions: function() {
        var _this = this,
            props = _this.props,
            inputValue = props.inputValue,
            option = props.options[_this.state.selectedIndex] || inputValue;

        return (
            React.createElement(AriaStatus, {
                message: props.getMessageForOption(option) || inputValue}
            )
        );
    },

    renderAriaMessageForIncomingOptions: function() {
        var props = this.props;

        return (
            React.createElement(AriaStatus, {
                message: props.getMessageForIncomingOptions(props.options.length)}
            )
        );
    },

    showDropdown: function() {
        var _this = this;

        if (!_this.state.isDropdownVisible) {
            _this.setState({
                isDropdownVisible: true
            }, function() {
                _this.props.onDropdownOpen();
            });
        }
    },

    hideDropdown: function() {
        var _this = this;

        if (_this.state.isDropdownVisible) {
            _this.setState({
                isDropdownVisible: false
            }, function() {
                _this.props.onDropdownClose();
            });
        }
    },

    showHint: function() {
        var _this = this,
            props = _this.props,
            inputValue = props.inputValue,
            inputValueLength = inputValue.length,
            isHintVisible = inputValueLength > 0 &&
                // A visible part of the hint must be
                // available for us to complete it.
                props.handleHint(inputValue, props.options).slice(inputValueLength).length > 0;

        _this.setState({
            isHintVisible: isHintVisible
        });
    },

    hideHint: function() {
        this.setState({
            isHintVisible: false
        });
    },

    setSelectedIndex: function(index, callback) {
        this.setState({
            selectedIndex: index
        }, callback);
    },

    handleChange: function(event) {
        var _this = this;

        _this.showHint();
        _this.showDropdown();
        _this.setSelectedIndex(-1);
        _this.props.onChange(event);
        _this.userInputValue = event.target.value;
    },

    focus: function() {
        this.refs.input.getDOMNode().focus();
    },

    handleFocus: function(event) {
        var _this = this;

        _this.showDropdown();
        _this.props.onFocus(event);
    },

    handleClick: function(event) {
        var _this = this;

        _this.showHint();
        _this.props.onInputClick(event);
    },

    navigate: function(direction, callback) {
        var _this = this,
            minIndex = -1,
            maxIndex = _this.props.options.length - 1,
            index = _this.state.selectedIndex + direction;

        if (index > maxIndex) {
            index = minIndex;
        } else if (index < minIndex) {
            index = maxIndex;
        }

        _this.setSelectedIndex(index, callback);
    },

    handleKeyDown: function(event) {
        var _this = this,
            key = event.key,
            props = _this.props,
            input = _this.refs.input,
            isDropdownVisible = _this.state.isDropdownVisible,
            isHintVisible = _this.state.isHintVisible,
            hasHandledKeyDown = false,
            index,
            optionData,
            dir;

        switch (key) {
        case 'End':
        case 'Tab':
            if (isHintVisible && !event.shiftKey) {
                event.preventDefault();
                props.onComplete(event, props.handleHint(props.inputValue, props.options));
            }
            break;
        case 'ArrowLeft':
        case 'ArrowRight':
            if (isHintVisible && !event.shiftKey && input.isCursorAtEnd()) {
                dir = getTextDirection(props.inputValue);

                if ((dir === 'ltr' && key === 'ArrowRight') || (dir === 'rtl' && key === 'ArrowLeft')) {
                    props.onComplete(event, props.handleHint(props.inputValue, props.options));
                }
            }
            break;
        case 'Enter':
            _this.focus();
            _this.hideHint();
            _this.hideDropdown();
            break;
        case 'Escape':
            _this.hideHint();
            _this.hideDropdown();
            break;
        case 'ArrowUp':
        case 'ArrowDown':
            if (props.options.length > 0) {
                event.preventDefault();

                _this.showHint();
                _this.showDropdown();

                if (isDropdownVisible) {
                    dir = key === 'ArrowUp' ? -1: 1;
                    hasHandledKeyDown = true;

                    _this.navigate(dir, function() {
                        var selectedIndex = _this.state.selectedIndex,
                            previousInputValue = _this.previousInputValue,
                            optionData = previousInputValue,
                            optionOffsetTop = 0,
                            selectedOption,
                            dropdown;

                        // We're currently on an option.
                        if (selectedIndex >= 0) {
                            // Save the current `input` value,
                            // as we might arrow back to it later.
                            if (previousInputValue === null) {
                                _this.previousInputValue = props.inputValue;
                            }

                            optionData = props.options[selectedIndex];
                            // Make selected option always scroll to visible
                            dropdown = React.findDOMNode(_this.refs.dropdown);
                            selectedOption = dropdown.children[selectedIndex];
                            optionOffsetTop = selectedOption.offsetTop;
                            if(optionOffsetTop + selectedOption.clientHeight > dropdown.clientHeight ||
                                optionOffsetTop < dropdown.scrollTop) {
                                dropdown.scrollTop = optionOffsetTop;
                            }
                        }

                        props.onOptionChange(event, optionData, selectedIndex);
                        props.onKeyDown(event, optionData, selectedIndex);
                    });
                }
            }

            break;
        }

        if (!hasHandledKeyDown) {
            index = this.state.selectedIndex;
            optionData = index < 0 ? props.inputValue : props.options[index];
            props.onKeyDown(event, optionData, index);
        }
    },

    handleOptionClick: function(selectedIndex, event) {
        var _this = this,
            props = _this.props;

        _this.focus();
        _this.hideHint();
        _this.hideDropdown();
        _this.setSelectedIndex(selectedIndex);
        props.onOptionClick(event, props.options[selectedIndex], selectedIndex);
    },

    handleOptionMouseOver: function(selectedIndex) {
        var _this = this;

        if (_this.props.hoverSelect) {
            _this.setSelectedIndex(selectedIndex);
        }
    },

    handleMouseOut: function() {
        var _this = this;

        if (_this.props.hoverSelect) {
            _this.setSelectedIndex(-1);
        }
    },

    handleWindowClose: function(event) {
        var _this = this,
            target = event.target;

        if (target !== window && !this.getDOMNode().contains(target)) {
            _this.hideHint();
            _this.hideDropdown();
        }
    }
});

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../utils/get_text_direction":6,"./aria_status.jsx":2,"./input.jsx":3,"_process":1,"react":"react"}],5:[function(require,module,exports){
module.exports = require('./components/typeahead.jsx');


},{"./components/typeahead.jsx":4}],6:[function(require,module,exports){
'use strict';

var RTLCharactersRegExp = require('./rtl_chars_regexp'),
    NeutralCharactersRegExp = require('./neutral_chars_regexp'),
    startsWithRTL = new RegExp('^(?:' + NeutralCharactersRegExp + ')*(?:' + RTLCharactersRegExp + ')'),
    neutralText = new RegExp('^(?:' + NeutralCharactersRegExp + ')*$');

module.exports = function(text) {
    var dir = 'ltr';

    if (startsWithRTL.test(text)) {
        dir = 'rtl';
    } else if (neutralText.test(text)) {
        dir = null;
    }

    return dir;
};


},{"./neutral_chars_regexp":7,"./rtl_chars_regexp":8}],7:[function(require,module,exports){
// DO NOT EDIT!
// THIS FILE IS GENERATED!

// All bidi characters except those found in classes 'L' (LTR), 'R' (RTL), and 'AL' (RTL Arabic) as per Unicode 7.0.0.

// jshint ignore:start
// jscs:disable maximumLineLength
module.exports = '[\0-@\[-`\{-\xA9\xAB-\xB4\xB6-\xB9\xBB-\xBF\xD7\xF7\u02B9\u02BA\u02C2-\u02CF\u02D2-\u02DF\u02E5-\u02ED\u02EF-\u036F\u0374\u0375\u037E\u0384\u0385\u0387\u03F6\u0483-\u0489\u058A\u058D-\u058F\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0600-\u0607\u0609\u060A\u060C\u060E-\u061A\u064B-\u066C\u0670\u06D6-\u06E4\u06E7-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07F6-\u07F9\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09F2\u09F3\u09FB\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AF1\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0BF3-\u0BFA\u0C00\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C78-\u0C7E\u0C81\u0CBC\u0CCC\u0CCD\u0CE2\u0CE3\u0D01\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E3F\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39-\u0F3D\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1390-\u1399\u1400\u1680\u169B\u169C\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DB\u17DD\u17F0-\u17F9\u1800-\u180E\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1940\u1944\u1945\u19DE-\u19FF\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2000-\u200D\u2010-\u2029\u202F-\u2064\u2068\u206A-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20BD\u20D0-\u20F0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u2150-\u215F\u2189\u2190-\u2335\u237B-\u2394\u2396-\u23FA\u2400-\u2426\u2440-\u244A\u2460-\u249B\u24EA-\u26AB\u26AD-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B98-\u2BB9\u2BBD-\u2BC8\u2BCA-\u2BD1\u2CE5-\u2CEA\u2CEF-\u2CF1\u2CF9-\u2CFF\u2D7F\u2DE0-\u2E42\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3000-\u3004\u3008-\u3020\u302A-\u302D\u3030\u3036\u3037\u303D-\u303F\u3099-\u309C\u30A0\u30FB\u31C0-\u31E3\u321D\u321E\u3250-\u325F\u327C-\u327E\u32B1-\u32BF\u32CC-\u32CF\u3377-\u337A\u33DE\u33DF\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA60D-\uA60F\uA66F-\uA67F\uA69F\uA6F0\uA6F1\uA700-\uA721\uA788\uA802\uA806\uA80B\uA825\uA826\uA828-\uA82B\uA838\uA839\uA874-\uA877\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFB29\uFD3E\uFD3F\uFDFD\uFE00-\uFE19\uFE20-\uFE2D\uFE30-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD]|\uD800[\uDD01\uDD40-\uDD8C\uDD90-\uDD9B\uDDA0\uDDFD\uDEE0-\uDEFB\uDF76-\uDF7A]|\uD802[\uDD1F\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6\uDF39-\uDF3F]|\uD803[\uDE60-\uDE7E]|[\uD804\uDB40][\uDC01\uDC38-\uDC46\uDC52-\uDC65\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDEDF\uDEE3-\uDEEA\uDF01\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E\uDCA0-\uDCA3]|\uD834[\uDD67-\uDD69\uDD73-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE00-\uDE45\uDF00-\uDF56]|\uD835[\uDEDB\uDF15\uDF4F\uDF89\uDFC3\uDFCE-\uDFFF]|\uD83A[\uDCD0-\uDCD6]|\uD83B[\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD00-\uDD0C\uDD6A\uDD6B\uDF00-\uDF2C\uDF30-\uDF7D\uDF80-\uDFCE\uDFD4-\uDFF7]|\uD83D[\uDC00-\uDCFE\uDD00-\uDD4A\uDD50-\uDD79\uDD7B-\uDDA3\uDDA5-\uDE42\uDE45-\uDECF\uDEE0-\uDEEC\uDEF0-\uDEF3\uDF00-\uDF73\uDF80-\uDFD4]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD]';
// jscs:enable maximumLineLength
// jshint ignore:end


},{}],8:[function(require,module,exports){
// DO NOT EDIT!
// THIS FILE IS GENERATED!

// All bidi characters found in classes 'R', 'AL', 'RLE', 'RLO', and 'RLI' as per Unicode 7.0.0.

// jshint ignore:start
// jscs:disable maximumLineLength
module.exports = '[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05EA\u05F0-\u05F4\u0608\u060B\u060D\u061B\u061C\u061E-\u064A\u066D-\u066F\u0671-\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u070D\u070F\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0830-\u083E\u0840-\u0858\u085E\u08A0-\u08B2\u200F\u202B\u202E\u2067\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFC\uFE70-\uFE74\uFE76-\uFEFC]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC57-\uDC9E\uDCA7-\uDCAF\uDD00-\uDD1B\uDD20-\uDD39\uDD3F\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE40-\uDE47\uDE50-\uDE58\uDE60-\uDE9F\uDEC0-\uDEE4\uDEEB-\uDEF6\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDF99-\uDF9C\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]';
// jscs:enable maximumLineLength
// jshint ignore:end


},{}]},{},[5])(5)
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwic3JjL2NvbXBvbmVudHMvYXJpYV9zdGF0dXMuanN4Iiwic3JjL2NvbXBvbmVudHMvaW5wdXQuanN4Iiwic3JjL2NvbXBvbmVudHMvdHlwZWFoZWFkLmpzeCIsIi9Vc2Vycy9hbmRyZXdzdHVja2kvQ29kZS9yZWFjdC10eXBlYWhlYWQtY29tcG9uZW50L3NyYy9pbmRleC5qcyIsIi9Vc2Vycy9hbmRyZXdzdHVja2kvQ29kZS9yZWFjdC10eXBlYWhlYWQtY29tcG9uZW50L3NyYy91dGlscy9nZXRfdGV4dF9kaXJlY3Rpb24uanMiLCIvVXNlcnMvYW5kcmV3c3R1Y2tpL0NvZGUvcmVhY3QtdHlwZWFoZWFkLWNvbXBvbmVudC9zcmMvdXRpbHMvbmV1dHJhbF9jaGFyc19yZWdleHAuanMiLCIvVXNlcnMvYW5kcmV3c3R1Y2tpL0NvZGUvcmVhY3QtdHlwZWFoZWFkLWNvbXBvbmVudC9zcmMvdXRpbHMvcnRsX2NoYXJzX3JlZ2V4cC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25nQkEsTUFBTSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQzs7OztBQ0F2RCxZQUFZLENBQUM7O0FBRWIsSUFBSSxtQkFBbUIsR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUM7SUFDbkQsdUJBQXVCLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0lBQzNELGFBQWEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsdUJBQXVCLEdBQUcsT0FBTyxHQUFHLG1CQUFtQixHQUFHLEdBQUcsQ0FBQztBQUN0RyxJQUFJLFdBQVcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsdUJBQXVCLEdBQUcsS0FBSyxDQUFDLENBQUM7O0FBRXZFLE1BQU0sQ0FBQyxPQUFPLEdBQUcsU0FBUyxJQUFJLEVBQUU7QUFDaEMsSUFBSSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUM7O0lBRWhCLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMxQixHQUFHLEdBQUcsS0FBSyxDQUFDO0tBQ2YsTUFBTSxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDL0IsR0FBRyxHQUFHLElBQUksQ0FBQztBQUNuQixLQUFLOztJQUVELE9BQU8sR0FBRyxDQUFDO0NBQ2QsQ0FBQzs7OztBQ2pCRixlQUFlO0FBQ2YsMEJBQTBCOztBQUUxQixzSEFBc0g7O0FBRXRILHNCQUFzQjtBQUN0QixpQ0FBaUM7QUFDakMsTUFBTSxDQUFDLE9BQU8sR0FBRyw2OElBQTY4SSxDQUFDO0FBQy85SSxnQ0FBZ0M7QUFDaEMsb0JBQW9COzs7O0FDVHBCLGVBQWU7QUFDZiwwQkFBMEI7O0FBRTFCLGdHQUFnRzs7QUFFaEcsc0JBQXNCO0FBQ3RCLGlDQUFpQztBQUNqQyxNQUFNLENBQUMsT0FBTyxHQUFHLHdzQ0FBd3NDLENBQUM7QUFDMXRDLGdDQUFnQztBQUNoQyxvQkFBb0IiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuICAgIHZhciBjdXJyZW50UXVldWU7XG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHZhciBpID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtpXSgpO1xuICAgICAgICB9XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbn1cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgcXVldWUucHVzaChmdW4pO1xuICAgIGlmICghZHJhaW5pbmcpIHtcbiAgICAgICAgc2V0VGltZW91dChkcmFpblF1ZXVlLCAwKTtcbiAgICB9XG59O1xuXG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxuLy8gVE9ETyhzaHR5bG1hbilcbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHdpbmRvdy5SZWFjdCB8fCByZXF1aXJlKCdyZWFjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ0FyaWEgU3RhdHVzJyxcblxuICAgIHByb3BUeXBlczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA/IHt9IDoge1xuICAgICAgICBtZXNzYWdlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nXG4gICAgfSxcblxuICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAvLyBUaGlzIGlzIG5lZWRlZCBhcyBgY29tcG9uZW50RGlkVXBkYXRlYFxuICAgICAgICAvLyBkb2VzIG5vdCBmaXJlIG9uIHRoZSBpbml0aWFsIHJlbmRlci5cbiAgICAgICAgX3RoaXMuc2V0VGV4dENvbnRlbnQoX3RoaXMucHJvcHMubWVzc2FnZSk7XG4gICAgfSxcblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgX3RoaXMuc2V0VGV4dENvbnRlbnQoX3RoaXMucHJvcHMubWVzc2FnZSk7XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgICAgICAgcm9sZTogXCJzdGF0dXNcIiwgXG4gICAgICAgICAgICAgICAgXCJhcmlhLWxpdmVcIjogXCJwb2xpdGVcIiwgXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogJy05OTk5cHgnLFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIC8vIFdlIGNhbm5vdCBzZXQgYHRleHRDb250ZW50YCBkaXJlY3RseSBpbiBgcmVuZGVyYCxcbiAgICAvLyBiZWNhdXNlIFJlYWN0IGFkZHMvZGVsZXRlcyB0ZXh0IG5vZGVzIHdoZW4gcmVuZGVyaW5nLFxuICAgIC8vIHdoaWNoIGNvbmZ1c2VzIHNjcmVlbiByZWFkZXJzIGFuZCBkb2Vzbid0IGNhdXNlIHRoZW0gdG8gcmVhZCBjaGFuZ2VzLlxuICAgIHNldFRleHRDb250ZW50OiBmdW5jdGlvbih0ZXh0Q29udGVudCkge1xuICAgICAgICAvLyBXZSBjb3VsZCBzZXQgYGlubmVySFRNTGAsIGJ1dCBpdCdzIGJldHRlciB0byBhdm9pZCBpdC5cbiAgICAgICAgdGhpcy5nZXRET01Ob2RlKCkudGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudCB8fCAnJztcbiAgICB9XG59KTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OWhibVJ5WlhkemRIVmphMmt2UTI5a1pTOXlaV0ZqZEMxMGVYQmxZV2hsWVdRdFkyOXRjRzl1Wlc1MEwzTnlZeTlqYjIxd2IyNWxiblJ6TDJGeWFXRmZjM1JoZEhWekxtcHplQ0pkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPMEZCUVVFc1dVRkJXU3hEUVVGRE96dEJRVVZpTEVsQlFVa3NTMEZCU3l4SFFVRkhMRTlCUVU4c1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6czdRVUZGTjBJc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPMEZCUTI1RExFbEJRVWtzVjBGQlZ5eEZRVUZGTEdGQlFXRTdPMGxCUlRGQ0xGTkJRVk1zUlVGQlJTeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1MwRkJTeXhaUVVGWkxFZEJRVWNzUlVGQlJTeEhRVUZITzFGQlEzQkVMRTlCUVU4c1JVRkJSU3hMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMDdRVUZEZGtNc1MwRkJTenM3U1VGRlJDeHBRa0ZCYVVJc1JVRkJSU3hYUVVGWE8wRkJRMnhETEZGQlFWRXNTVUZCU1N4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRM3BDTzBGQlEwRTdPMUZCUlZFc1MwRkJTeXhEUVVGRExHTkJRV01zUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8wRkJRMnhFTEV0QlFVczdPMGxCUlVRc2EwSkJRV3RDTEVWQlFVVXNWMEZCVnp0QlFVTnVReXhSUVVGUkxFbEJRVWtzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXpzN1VVRkZha0lzUzBGQlN5eERRVUZETEdOQlFXTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzBGQlEyeEVMRXRCUVVzN08wbEJSVVFzVFVGQlRTeEZRVUZGTEZkQlFWYzdVVUZEWmp0WlFVTkpMRzlDUVVGQkxFMUJRVXNzUlVGQlFTeERRVUZCTzJkQ1FVTkVMRWxCUVVFc1JVRkJTU3hEUVVGRExGRkJRVUVzUlVGQlVUdG5Ra0ZEWWl4WFFVRkJMRVZCUVZNc1EwRkJReXhSUVVGQkxFVkJRVkU3WjBKQlEyeENMRXRCUVVFc1JVRkJTeXhEUVVGRk8yOUNRVU5JTEVsQlFVa3NSVUZCUlN4VFFVRlRPMjlDUVVObUxGRkJRVkVzUlVGQlJTeFZRVUZWTzJsQ1FVTjBRaXhEUVVGQk8xbEJRMG9zUTBGQlFUdFZRVU5LTzBGQlExWXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRVHM3UVVGRlFTeEpRVUZKTEdOQlFXTXNSVUZCUlN4VFFVRlRMRmRCUVZjc1JVRkJSVHM3VVVGRmJFTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRExGZEJRVmNzUjBGQlJ5eFhRVUZYTEVsQlFVa3NSVUZCUlN4RFFVRkRPMHRCUTNKRU8wTkJRMG9zUTBGQlF5eERRVUZESWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JuWmhjaUJTWldGamRDQTlJSEpsY1hWcGNtVW9KM0psWVdOMEp5azdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnVW1WaFkzUXVZM0psWVhSbFEyeGhjM01vZTF4dUlDQWdJR1JwYzNCc1lYbE9ZVzFsT2lBblFYSnBZU0JUZEdGMGRYTW5MRnh1WEc0Z0lDQWdjSEp2Y0ZSNWNHVnpPaUJ3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBOVBUMGdKM0J5YjJSMVkzUnBiMjRuSUQ4Z2UzMGdPaUI3WEc0Z0lDQWdJQ0FnSUcxbGMzTmhaMlU2SUZKbFlXTjBMbEJ5YjNCVWVYQmxjeTV6ZEhKcGJtZGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1kyOXRjRzl1Wlc1MFJHbGtUVzkxYm5RNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdJQ0FnSUM4dklGUm9hWE1nYVhNZ2JtVmxaR1ZrSUdGeklHQmpiMjF3YjI1bGJuUkVhV1JWY0dSaGRHVmdYRzRnSUNBZ0lDQWdJQzh2SUdSdlpYTWdibTkwSUdacGNtVWdiMjRnZEdobElHbHVhWFJwWVd3Z2NtVnVaR1Z5TGx4dUlDQWdJQ0FnSUNCZmRHaHBjeTV6WlhSVVpYaDBRMjl1ZEdWdWRDaGZkR2hwY3k1d2NtOXdjeTV0WlhOellXZGxLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUNBZ0lDQmZkR2hwY3k1elpYUlVaWGgwUTI5dWRHVnVkQ2hmZEdocGN5NXdjbTl3Y3k1dFpYTnpZV2RsS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnY21WdVpHVnlPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUNBZ0lDQWdJRHh6Y0dGdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtOXNaVDBuYzNSaGRIVnpKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5YVdFdGJHbDJaVDBuY0c5c2FYUmxKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wZVd4bFBYdDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bFpuUTZJQ2N0T1RrNU9YQjRKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHOXphWFJwYjI0NklDZGhZbk52YkhWMFpTZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdMeThnVjJVZ1kyRnVibTkwSUhObGRDQmdkR1Y0ZEVOdmJuUmxiblJnSUdScGNtVmpkR3g1SUdsdUlHQnlaVzVrWlhKZ0xGeHVJQ0FnSUM4dklHSmxZMkYxYzJVZ1VtVmhZM1FnWVdSa2N5OWtaV3hsZEdWeklIUmxlSFFnYm05a1pYTWdkMmhsYmlCeVpXNWtaWEpwYm1jc1hHNGdJQ0FnTHk4Z2QyaHBZMmdnWTI5dVpuVnpaWE1nYzJOeVpXVnVJSEpsWVdSbGNuTWdZVzVrSUdSdlpYTnVKM1FnWTJGMWMyVWdkR2hsYlNCMGJ5QnlaV0ZrSUdOb1lXNW5aWE11WEc0Z0lDQWdjMlYwVkdWNGRFTnZiblJsYm5RNklHWjFibU4wYVc5dUtIUmxlSFJEYjI1MFpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUM4dklGZGxJR052ZFd4a0lITmxkQ0JnYVc1dVpYSklWRTFNWUN3Z1luVjBJR2wwSjNNZ1ltVjBkR1Z5SUhSdklHRjJiMmxrSUdsMExseHVJQ0FnSUNBZ0lDQjBhR2x6TG1kbGRFUlBUVTV2WkdVb0tTNTBaWGgwUTI5dWRHVnVkQ0E5SUhSbGVIUkRiMjUwWlc1MElIeDhJQ2NuTzF4dUlDQWdJSDFjYm4wcE8xeHVJbDE5IiwiKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gd2luZG93LlJlYWN0IHx8IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgIGRpc3BsYXlOYW1lOiAnSW5wdXQnLFxuXG4gICAgcHJvcFR5cGVzOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nID8ge30gOiB7XG4gICAgICAgIHZhbHVlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBvbkNoYW5nZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmNcbiAgICB9LFxuXG4gICAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbigpIHt9XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgICBkaXIgPSBfdGhpcy5wcm9wcy5kaXI7XG5cbiAgICAgICAgaWYgKGRpciA9PT0gbnVsbCB8fCBkaXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gV2hlbiBzZXR0aW5nIGFuIGF0dHJpYnV0ZSB0byBudWxsL3VuZGVmaW5lZCxcbiAgICAgICAgICAgIC8vIFJlYWN0IGluc3RlYWQgc2V0cyB0aGUgYXR0cmlidXRlIHRvIGFuIGVtcHR5IHN0cmluZy5cblxuICAgICAgICAgICAgLy8gVGhpcyBpcyBub3QgZGVzaXJlZCBiZWNhdXNlIG9mIGEgcG9zc2libGUgYnVnIGluIENocm9tZS5cbiAgICAgICAgICAgIC8vIElmIHRoZSBwYWdlIGlzIFJUTCwgYW5kIHRoZSBpbnB1dCdzIGBkaXJgIGF0dHJpYnV0ZSBpcyBzZXRcbiAgICAgICAgICAgIC8vIHRvIGFuIGVtcHR5IHN0cmluZywgQ2hyb21lIGFzc3VtZXMgTFRSLCB3aGljaCBpc24ndCB3aGF0IHdlIHdhbnQuXG4gICAgICAgICAgICBSZWFjdC5maW5kRE9NTm9kZShfdGhpcykucmVtb3ZlQXR0cmlidXRlKCdkaXInKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwgUmVhY3QuX19zcHJlYWQoe30sIFxuICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLCBcbiAgICAgICAgICAgICAgICB7b25DaGFuZ2U6IF90aGlzLmhhbmRsZUNoYW5nZX0pXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIGhhbmRsZUNoYW5nZTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcblxuICAgICAgICAvLyBUaGVyZSBhcmUgc2V2ZXJhbCBSZWFjdCBidWdzIGluIElFLFxuICAgICAgICAvLyB3aGVyZSB0aGUgYGlucHV0YCdzIGBvbkNoYW5nZWAgZXZlbnQgaXNcbiAgICAgICAgLy8gZmlyZWQgZXZlbiB3aGVuIHRoZSB2YWx1ZSBkaWRuJ3QgY2hhbmdlLlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzIxODVcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zMzc3XG4gICAgICAgIGlmIChldmVudC50YXJnZXQudmFsdWUgIT09IHByb3BzLnZhbHVlKSB7XG4gICAgICAgICAgICBwcm9wcy5vbkNoYW5nZShldmVudCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgYmx1cjogZnVuY3Rpb24oKSB7XG4gICAgICAgIFJlYWN0LmZpbmRET01Ob2RlKHRoaXMpLmJsdXIoKTtcbiAgICB9LFxuXG4gICAgaXNDdXJzb3JBdEVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgICBpbnB1dERPTU5vZGUgPSBSZWFjdC5maW5kRE9NTm9kZShfdGhpcyksXG4gICAgICAgICAgICB2YWx1ZUxlbmd0aCA9IF90aGlzLnByb3BzLnZhbHVlLmxlbmd0aDtcblxuICAgICAgICByZXR1cm4gaW5wdXRET01Ob2RlLnNlbGVjdGlvblN0YXJ0ID09PSB2YWx1ZUxlbmd0aCAmJlxuICAgICAgICAgICAgICAgaW5wdXRET01Ob2RlLnNlbGVjdGlvbkVuZCA9PT0gdmFsdWVMZW5ndGg7XG4gICAgfVxufSk7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTloYm1SeVpYZHpkSFZqYTJrdlEyOWtaUzl5WldGamRDMTBlWEJsWVdobFlXUXRZMjl0Y0c5dVpXNTBMM055WXk5amIyMXdiMjVsYm5SekwybHVjSFYwTG1wemVDSmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU8wRkJRVUVzV1VGQldTeERRVUZET3p0QlFVVmlMRWxCUVVrc1MwRkJTeXhIUVVGSExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXpzN1FVRkZOMElzVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRE8wRkJRMjVETEVsQlFVa3NWMEZCVnl4RlFVRkZMRTlCUVU4N08wbEJSWEJDTEZOQlFWTXNSVUZCUlN4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUzBGQlN5eFpRVUZaTEVkQlFVY3NSVUZCUlN4SFFVRkhPMUZCUTNCRUxFdEJRVXNzUlVGQlJTeExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwN1VVRkROMElzVVVGQlVTeEZRVUZGTEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTVHRCUVVOMFF5eExRVUZMT3p0SlFVVkVMR1ZCUVdVc1JVRkJSU3hYUVVGWE8xRkJRM2hDTEU5QlFVODdXVUZEU0N4TFFVRkxMRVZCUVVVc1JVRkJSVHRaUVVOVUxGRkJRVkVzUlVGQlJTeFhRVUZYTEVWQlFVVTdVMEZETVVJc1EwRkJRenRCUVVOV0xFdEJRVXM3TzBsQlJVUXNhMEpCUVd0Q0xFVkJRVVVzVjBGQlZ6dFJRVU16UWl4SlFVRkpMRXRCUVVzc1IwRkJSeXhKUVVGSk8wRkJRM2hDTEZsQlFWa3NSMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZET3p0QlFVVnNReXhSUVVGUkxFbEJRVWtzUjBGQlJ5eExRVUZMTEVsQlFVa3NTVUZCU1N4SFFVRkhMRXRCUVVzc1UwRkJVeXhGUVVGRk8wRkJReTlETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08xbEJSVmtzUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhsUVVGbExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdVMEZEYmtRN1FVRkRWQ3hMUVVGTE96dEpRVVZFTEUxQlFVMHNSVUZCUlN4WFFVRlhPMEZCUTNaQ0xGRkJRVkVzU1VGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRPenRSUVVWcVFqdFpRVU5KTEc5Q1FVRkJMRTlCUVUwc1JVRkJRU3huUWtGQlFTeEhRVUZCTzJkQ1FVTkVMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXNzUlVGQlF6dG5Ra0ZEYUVJc1EwRkJRU3hSUVVGQkxFVkJRVkVzUTBGQlJTeExRVUZMTEVOQlFVTXNXVUZCWVN4RFFVRkJMRU5CUVVFN1dVRkRMMElzUTBGQlFUdFZRVU5LTzBGQlExWXNTMEZCU3pzN1NVRkZSQ3haUVVGWkxFVkJRVVVzVTBGQlV5eExRVUZMTEVWQlFVVTdRVUZEYkVNc1VVRkJVU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRPMEZCUXk5Q08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMUZCUlZFc1NVRkJTU3hMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NTMEZCU3l4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRk8xbEJRM0JETEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03VTBGRGVrSTdRVUZEVkN4TFFVRkxPenRKUVVWRUxFbEJRVWtzUlVGQlJTeFhRVUZYTzFGQlEySXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0QlFVTjJReXhMUVVGTE96dEpRVVZFTEdGQlFXRXNSVUZCUlN4WFFVRlhPMUZCUTNSQ0xFbEJRVWtzUzBGQlN5eEhRVUZITEVsQlFVazdXVUZEV2l4WlFVRlpMRWRCUVVjc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTTdRVUZEYmtRc1dVRkJXU3hYUVVGWExFZEJRVWNzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRE96dFJRVVV6UXl4UFFVRlBMRmxCUVZrc1EwRkJReXhqUVVGakxFdEJRVXNzVjBGQlZ6dGxRVU16UXl4WlFVRlpMRU5CUVVNc1dVRkJXU3hMUVVGTExGZEJRVmNzUTBGQlF6dExRVU53UkR0RFFVTktMRU5CUVVNc1EwRkJReUlzSW1acGJHVWlPaUpuWlc1bGNtRjBaV1F1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1MllYSWdVbVZoWTNRZ1BTQnlaWEYxYVhKbEtDZHlaV0ZqZENjcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRkpsWVdOMExtTnlaV0YwWlVOc1lYTnpLSHRjYmlBZ0lDQmthWE53YkdGNVRtRnRaVG9nSjBsdWNIVjBKeXhjYmx4dUlDQWdJSEJ5YjNCVWVYQmxjem9nY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1BUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lIdDlJRG9nZTF4dUlDQWdJQ0FnSUNCMllXeDFaVG9nVW1WaFkzUXVVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNBZ0lDQWdiMjVEYUdGdVoyVTZJRkpsWVdOMExsQnliM0JVZVhCbGN5NW1kVzVqWEc0Z0lDQWdmU3hjYmx4dUlDQWdJR2RsZEVSbFptRjFiSFJRY205d2N6b2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ0p5Y3NYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrTm9ZVzVuWlRvZ1puVnVZM1JwYjI0b0tTQjdmVnh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JqYjIxd2IyNWxiblJFYVdSVmNHUmhkR1U2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWDNSb2FYTWdQU0IwYUdsekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdseUlEMGdYM1JvYVhNdWNISnZjSE11WkdseU8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoa2FYSWdQVDA5SUc1MWJHd2dmSHdnWkdseUlEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZkb1pXNGdjMlYwZEdsdVp5QmhiaUJoZEhSeWFXSjFkR1VnZEc4Z2JuVnNiQzkxYm1SbFptbHVaV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJTWldGamRDQnBibk4wWldGa0lITmxkSE1nZEdobElHRjBkSEpwWW5WMFpTQjBieUJoYmlCbGJYQjBlU0J6ZEhKcGJtY3VYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJvYVhNZ2FYTWdibTkwSUdSbGMybHlaV1FnWW1WallYVnpaU0J2WmlCaElIQnZjM05wWW14bElHSjFaeUJwYmlCRGFISnZiV1V1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCMGFHVWdjR0ZuWlNCcGN5QlNWRXdzSUdGdVpDQjBhR1VnYVc1d2RYUW5jeUJnWkdseVlDQmhkSFJ5YVdKMWRHVWdhWE1nYzJWMFhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCMGJ5QmhiaUJsYlhCMGVTQnpkSEpwYm1jc0lFTm9jbTl0WlNCaGMzTjFiV1Z6SUV4VVVpd2dkMmhwWTJnZ2FYTnVKM1FnZDJoaGRDQjNaU0IzWVc1MExseHVJQ0FnSUNBZ0lDQWdJQ0FnVW1WaFkzUXVabWx1WkVSUFRVNXZaR1VvWDNSb2FYTXBMbkpsYlc5MlpVRjBkSEpwWW5WMFpTZ25aR2x5SnlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ2NtVnVaR1Z5T2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1BHbHVjSFYwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXk0dUxsOTBhR2x6TG5CeWIzQnpmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1UTJoaGJtZGxQWHRmZEdocGN5NW9ZVzVrYkdWRGFHRnVaMlY5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JvWVc1a2JHVkRhR0Z1WjJVNklHWjFibU4wYVc5dUtHVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ3Y205d2N5QTlJSFJvYVhNdWNISnZjSE03WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdWR2hsY21VZ1lYSmxJSE5sZG1WeVlXd2dVbVZoWTNRZ1luVm5jeUJwYmlCSlJTeGNiaUFnSUNBZ0lDQWdMeThnZDJobGNtVWdkR2hsSUdCcGJuQjFkR0FuY3lCZ2IyNURhR0Z1WjJWZ0lHVjJaVzUwSUdselhHNGdJQ0FnSUNBZ0lDOHZJR1pwY21Wa0lHVjJaVzRnZDJobGJpQjBhR1VnZG1Gc2RXVWdaR2xrYmlkMElHTm9ZVzVuWlM1Y2JpQWdJQ0FnSUNBZ0x5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMlpoWTJWaWIyOXJMM0psWVdOMEwybHpjM1ZsY3k4eU1UZzFYRzRnSUNBZ0lDQWdJQzh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5bVlXTmxZbTl2YXk5eVpXRmpkQzlwYzNOMVpYTXZNek0zTjF4dUlDQWdJQ0FnSUNCcFppQW9aWFpsYm5RdWRHRnlaMlYwTG5aaGJIVmxJQ0U5UFNCd2NtOXdjeTUyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZjSE11YjI1RGFHRnVaMlVvWlhabGJuUXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJR0pzZFhJNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0JTWldGamRDNW1hVzVrUkU5TlRtOWtaU2gwYUdsektTNWliSFZ5S0NrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdselEzVnljMjl5UVhSRmJtUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhVzV3ZFhSRVQwMU9iMlJsSUQwZ1VtVmhZM1F1Wm1sdVpFUlBUVTV2WkdVb1gzUm9hWE1wTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdWTVpXNW5kR2dnUFNCZmRHaHBjeTV3Y205d2N5NTJZV3gxWlM1c1pXNW5kR2c3WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsdWNIVjBSRTlOVG05a1pTNXpaV3hsWTNScGIyNVRkR0Z5ZENBOVBUMGdkbUZzZFdWTVpXNW5kR2dnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWNIVjBSRTlOVG05a1pTNXpaV3hsWTNScGIyNUZibVFnUFQwOUlIWmhiSFZsVEdWdVozUm9PMXh1SUNBZ0lIMWNibjBwTzF4dUlsMTkiLCIoZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSB3aW5kb3cuUmVhY3QgfHwgcmVxdWlyZSgncmVhY3QnKSxcbiAgICBJbnB1dCA9IHJlcXVpcmUoJy4vaW5wdXQuanN4JyksXG4gICAgQXJpYVN0YXR1cyA9IHJlcXVpcmUoJy4vYXJpYV9zdGF0dXMuanN4JyksXG4gICAgZ2V0VGV4dERpcmVjdGlvbiA9IHJlcXVpcmUoJy4uL3V0aWxzL2dldF90ZXh0X2RpcmVjdGlvbicpLFxuICAgIG5vb3AgPSBmdW5jdGlvbigpIHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ1R5cGVhaGVhZCcsXG5cbiAgICBzdGF0aWNzOiB7XG4gICAgICAgIGdldEluc3RhbmNlQ291bnQ6IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjb3VudCA9IDA7XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKytjb3VudDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0oKSlcbiAgICB9LFxuXG4gICAgcHJvcFR5cGVzOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nID8ge30gOiB7XG4gICAgICAgIGlucHV0SWQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGlucHV0TmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgY2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBuZXN0ZWRDbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGF1dG9Gb2N1czogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIGhvdmVyU2VsZWN0OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgaW5wdXRWYWx1ZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgb3B0aW9uczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxuICAgICAgICBwbGFjZWhvbGRlcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgb25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgICAgICBvbktleURvd246IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgICAgICBvbktleVByZXNzOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgb25LZXlVcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIG9uRm9jdXM6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgICAgICBvbkJsdXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgICAgICBvblNlbGVjdDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIG9uSW5wdXRDbGljazogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIGhhbmRsZUhpbnQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgICAgICBvbkNvbXBsZXRlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgb25PcHRpb25DbGljazogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIG9uT3B0aW9uQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgb25Ecm9wZG93bk9wZW46IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgICAgICBvbkRyb3Bkb3duQ2xvc2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgICAgICBvcHRpb25UZW1wbGF0ZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgICAgZ2V0TWVzc2FnZUZvck9wdGlvbjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIGdldE1lc3NhZ2VGb3JJbmNvbWluZ09wdGlvbnM6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG4gICAgfSxcblxuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICcnLFxuICAgICAgICAgICAgbmVzdGVkQ2xhc3NOYW1lOiAnJyxcbiAgICAgICAgICAgIGlucHV0VmFsdWU6ICcnLFxuICAgICAgICAgICAgb3B0aW9uczogW10sXG4gICAgICAgICAgICBob3ZlclNlbGVjdDogdHJ1ZSxcbiAgICAgICAgICAgIG9uRm9jdXM6IG5vb3AsXG4gICAgICAgICAgICBvbktleURvd246IG5vb3AsXG4gICAgICAgICAgICBvbkNoYW5nZTogbm9vcCxcbiAgICAgICAgICAgIG9uSW5wdXRDbGljazogbm9vcCxcbiAgICAgICAgICAgIGhhbmRsZUhpbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbk9wdGlvbkNsaWNrOiBub29wLFxuICAgICAgICAgICAgb25PcHRpb25DaGFuZ2U6IG5vb3AsXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiAgbm9vcCxcbiAgICAgICAgICAgIG9uRHJvcGRvd25PcGVuOiBub29wLFxuICAgICAgICAgICAgb25Ecm9wZG93bkNsb3NlOiBub29wLFxuICAgICAgICAgICAgZ2V0TWVzc2FnZUZvck9wdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldE1lc3NhZ2VGb3JJbmNvbWluZ09wdGlvbnM6IGZ1bmN0aW9uKG51bWJlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgIG51bWJlciArICcgc3VnZ2VzdGlvbnMgYXJlIGF2YWlsYWJsZS4gVXNlIHVwIGFuZCBkb3duIGFycm93cyB0byBzZWxlY3QuJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgIH0sXG5cbiAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleDogLTEsXG4gICAgICAgICAgICBpc0hpbnRWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGlzRHJvcGRvd25WaXNpYmxlOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgICAgdW5pcXVlSWQgPSB0aGlzLmNvbnN0cnVjdG9yLmdldEluc3RhbmNlQ291bnQoKTtcblxuICAgICAgICBfdGhpcy51c2VySW5wdXRWYWx1ZSA9IG51bGw7XG4gICAgICAgIF90aGlzLnByZXZpb3VzSW5wdXRWYWx1ZSA9IG51bGw7XG4gICAgICAgIF90aGlzLmFjdGl2ZURlc2NlbmRhbnRJZCA9ICdyZWFjdC10eXBlYWhlYWQtYWN0aXZlZGVzY2VuZGFudC0nICsgdW5pcXVlSWQ7XG4gICAgICAgIF90aGlzLm9wdGlvbnNJZCA9ICdyZWFjdC10eXBlYWhlYWQtb3B0aW9ucy0nICsgdW5pcXVlSWQ7XG4gICAgfSxcblxuICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFkZEV2ZW50ID0gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIsXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dDbG9zZSA9IHRoaXMuaGFuZGxlV2luZG93Q2xvc2U7XG5cbiAgICAgICAgLy8gVGhlIGBmb2N1c2AgZXZlbnQgZG9lcyBub3QgYnViYmxlLCBzbyB3ZSBtdXN0IGNhcHR1cmUgaXQgaW5zdGVhZC5cbiAgICAgICAgLy8gVGhpcyBjbG9zZXMgVHlwZWFoZWFkJ3MgZHJvcGRvd24gd2hlbmV2ZXIgc29tZXRoaW5nIGVsc2UgZ2FpbnMgZm9jdXMuXG4gICAgICAgIGFkZEV2ZW50KCdmb2N1cycsIGhhbmRsZVdpbmRvd0Nsb3NlLCB0cnVlKTtcblxuICAgICAgICAvLyBJZiB3ZSBjbGljayBhbnl3aGVyZSBvdXRzaWRlIG9mIFR5cGVhaGVhZCwgY2xvc2UgdGhlIGRyb3Bkb3duLlxuICAgICAgICBhZGRFdmVudCgnY2xpY2snLCBoYW5kbGVXaW5kb3dDbG9zZSwgZmFsc2UpO1xuICAgIH0sXG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZW1vdmVFdmVudCA9IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyLFxuICAgICAgICAgICAgaGFuZGxlV2luZG93Q2xvc2UgPSB0aGlzLmhhbmRsZVdpbmRvd0Nsb3NlO1xuXG4gICAgICAgIHJlbW92ZUV2ZW50KCdmb2N1cycsIGhhbmRsZVdpbmRvd0Nsb3NlLCB0cnVlKTtcbiAgICAgICAgcmVtb3ZlRXZlbnQoJ2NsaWNrJywgaGFuZGxlV2luZG93Q2xvc2UsIGZhbHNlKTtcbiAgICB9LFxuXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24obmV4dFByb3BzKSB7XG4gICAgICAgIHZhciBuZXh0VmFsdWUgPSBuZXh0UHJvcHMuaW5wdXRWYWx1ZSxcbiAgICAgICAgICAgIG5leHRPcHRpb25zID0gbmV4dFByb3BzLm9wdGlvbnMsXG4gICAgICAgICAgICB2YWx1ZUxlbmd0aCA9IG5leHRWYWx1ZS5sZW5ndGgsXG4gICAgICAgICAgICBpc0hpbnRWaXNpYmxlID0gdmFsdWVMZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgLy8gQSB2aXNpYmxlIHBhcnQgb2YgdGhlIGhpbnQgbXVzdCBiZVxuICAgICAgICAgICAgICAgIC8vIGF2YWlsYWJsZSBmb3IgdXMgdG8gY29tcGxldGUgaXQuXG4gICAgICAgICAgICAgICAgbmV4dFByb3BzLmhhbmRsZUhpbnQobmV4dFZhbHVlLCBuZXh0T3B0aW9ucykuc2xpY2UodmFsdWVMZW5ndGgpLmxlbmd0aCA+IDA7XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBpc0hpbnRWaXNpYmxlOiBpc0hpbnRWaXNpYmxlXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3JlYWN0LXR5cGVhaGVhZC1jb250YWluZXIgJyArIF90aGlzLnByb3BzLmNsYXNzTmFtZX0sIFxuICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlcklucHV0KCksIFxuICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlckRyb3Bkb3duKCksIFxuICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlckFyaWFNZXNzYWdlRm9yT3B0aW9ucygpLCBcbiAgICAgICAgICAgICAgICBfdGhpcy5yZW5kZXJBcmlhTWVzc2FnZUZvckluY29taW5nT3B0aW9ucygpXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIHJlbmRlcklucHV0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAgIHN0YXRlID0gX3RoaXMuc3RhdGUsXG4gICAgICAgICAgICBwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgaW5wdXRWYWx1ZSA9IHByb3BzLmlucHV0VmFsdWUsXG4gICAgICAgICAgICBjbGFzc05hbWUgPSAncmVhY3QtdHlwZWFoZWFkLWlucHV0JyxcbiAgICAgICAgICAgIGlucHV0RGlyZWN0aW9uID0gZ2V0VGV4dERpcmVjdGlvbihpbnB1dFZhbHVlKTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgICAgICAgICAgICB9LCBcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwicmVhY3QtdHlwZWFoZWFkLWlucHV0LWNvbnRhaW5lclwifSwgXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dCwge1xuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdHJ1ZSwgXG4gICAgICAgICAgICAgICAgICAgIHJvbGU6IFwicHJlc2VudGF0aW9uXCIsIFxuICAgICAgICAgICAgICAgICAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsIFxuICAgICAgICAgICAgICAgICAgICBkaXI6IGlucHV0RGlyZWN0aW9uLCBcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUgKyAnIHJlYWN0LXR5cGVhaGVhZC1oaW50JyArIF90aGlzLnByb3BzLm5lc3RlZENsYXNzTmFtZSwgXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ3NpbHZlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICBXZWJraXRUZXh0RmlsbENvbG9yOiAnc2lsdmVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICAgICAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc3RhdGUuaXNIaW50VmlzaWJsZSA/IHByb3BzLmhhbmRsZUhpbnQoaW5wdXRWYWx1ZSwgcHJvcHMub3B0aW9ucykgOiBudWxsfVxuICAgICAgICAgICAgICAgICksIFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXQsIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmOiBcImlucHV0XCIsIFxuICAgICAgICAgICAgICAgICAgICByb2xlOiBcImNvbWJvYm94XCIsIFxuICAgICAgICAgICAgICAgICAgICBcImFyaWEtb3duc1wiOiBfdGhpcy5vcHRpb25zSWQsIFxuICAgICAgICAgICAgICAgICAgICBcImFyaWEtZXhwYW5kZWRcIjogc3RhdGUuaXNEcm9wZG93blZpc2libGUsIFxuICAgICAgICAgICAgICAgICAgICBcImFyaWEtYXV0b2NvbXBsZXRlXCI6IFwiYm90aFwiLCBcbiAgICAgICAgICAgICAgICAgICAgXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIjogX3RoaXMuYWN0aXZlRGVzY2VuZGFudElkLCBcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGlucHV0VmFsdWUsIFxuICAgICAgICAgICAgICAgICAgICBzcGVsbENoZWNrOiBmYWxzZSwgXG4gICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZTogZmFsc2UsIFxuICAgICAgICAgICAgICAgICAgICBhdXRvQ29ycmVjdDogZmFsc2UsIFxuICAgICAgICAgICAgICAgICAgICBkaXI6IGlucHV0RGlyZWN0aW9uLCBcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogX3RoaXMuaGFuZGxlQ2xpY2ssIFxuICAgICAgICAgICAgICAgICAgICBvbkZvY3VzOiBfdGhpcy5oYW5kbGVGb2N1cywgXG4gICAgICAgICAgICAgICAgICAgIG9uQmx1cjogcHJvcHMub25CbHVyLCBcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IF90aGlzLmhhbmRsZUNoYW5nZSwgXG4gICAgICAgICAgICAgICAgICAgIG9uS2V5RG93bjogX3RoaXMuaGFuZGxlS2V5RG93biwgXG4gICAgICAgICAgICAgICAgICAgIGlkOiBwcm9wcy5pbnB1dElkLCBcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogcHJvcHMuaW5wdXROYW1lLCBcbiAgICAgICAgICAgICAgICAgICAgYXV0b0ZvY3VzOiBwcm9wcy5hdXRvRm9jdXMsIFxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogcHJvcHMucGxhY2Vob2xkZXIsIFxuICAgICAgICAgICAgICAgICAgICBvblNlbGVjdDogcHJvcHMub25TZWxlY3QsIFxuICAgICAgICAgICAgICAgICAgICBvbktleVVwOiBwcm9wcy5vbktleVVwLCBcbiAgICAgICAgICAgICAgICAgICAgb25LZXlQcmVzczogcHJvcHMub25LZXlQcmVzcywgXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lICsgJyByZWFjdC10eXBlYWhlYWQtdXNlcnRleHQnICsgX3RoaXMucHJvcHMubmVzdGVkQ2xhc3NOYW1lLCBcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJ3RyYW5zcGFyZW50J1xuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgcmVuZGVyRHJvcGRvd246IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgICAgc3RhdGUgPSBfdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBPcHRpb25UZW1wbGF0ZSA9IHByb3BzLm9wdGlvblRlbXBsYXRlLFxuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleCA9IHN0YXRlLnNlbGVjdGVkSW5kZXgsXG4gICAgICAgICAgICBpc0Ryb3Bkb3duVmlzaWJsZSA9IHN0YXRlLmlzRHJvcGRvd25WaXNpYmxlLFxuICAgICAgICAgICAgYWN0aXZlRGVzY2VuZGFudElkID0gX3RoaXMuYWN0aXZlRGVzY2VuZGFudElkO1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9wdGlvbnMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInVsXCIsIHtpZDogX3RoaXMub3B0aW9uc0lkLCBcbiAgICAgICAgICAgICAgICByZWY6IFwiZHJvcGRvd25cIiwgXG4gICAgICAgICAgICAgICAgcm9sZTogXCJsaXN0Ym94XCIsIFxuICAgICAgICAgICAgICAgIFwiYXJpYS1oaWRkZW5cIjogIWlzRHJvcGRvd25WaXNpYmxlLCBcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaXNEcm9wZG93blZpc2libGUgPyAnYmxvY2snIDogJ25vbmUnXG4gICAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LXR5cGVhaGVhZC1vcHRpb25zXCIsIFxuICAgICAgICAgICAgICAgIG9uTW91c2VPdXQ6IHRoaXMuaGFuZGxlTW91c2VPdXR9LCBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMub3B0aW9ucy5tYXAoZnVuY3Rpb24oZGF0YSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1NlbGVjdGVkID0gc2VsZWN0ZWRJbmRleCA9PT0gaW5kZXg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIHtpZDogaXNTZWxlY3RlZCA/IGFjdGl2ZURlc2NlbmRhbnRJZCA6IG51bGwsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFyaWEtc2VsZWN0ZWRcIjogaXNTZWxlY3RlZCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6IFwib3B0aW9uXCIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGluZGV4LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogX3RoaXMuaGFuZGxlT3B0aW9uQ2xpY2suYmluZChfdGhpcywgaW5kZXgpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZU92ZXI6IF90aGlzLmhhbmRsZU9wdGlvbk1vdXNlT3Zlci5iaW5kKF90aGlzLCBpbmRleCl9LCBcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE9wdGlvblRlbXBsYXRlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VySW5wdXRWYWx1ZTogX3RoaXMudXNlcklucHV0VmFsdWUsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZTogcHJvcHMuaW5wdXRWYWx1ZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NlbGVjdGVkOiBpc1NlbGVjdGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgcmVuZGVyQXJpYU1lc3NhZ2VGb3JPcHRpb25zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAgIHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBpbnB1dFZhbHVlID0gcHJvcHMuaW5wdXRWYWx1ZSxcbiAgICAgICAgICAgIG9wdGlvbiA9IHByb3BzLm9wdGlvbnNbX3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleF0gfHwgaW5wdXRWYWx1ZTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChBcmlhU3RhdHVzLCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogcHJvcHMuZ2V0TWVzc2FnZUZvck9wdGlvbihvcHRpb24pIHx8IGlucHV0VmFsdWV9XG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIHJlbmRlckFyaWFNZXNzYWdlRm9ySW5jb21pbmdPcHRpb25zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChBcmlhU3RhdHVzLCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogcHJvcHMuZ2V0TWVzc2FnZUZvckluY29taW5nT3B0aW9ucyhwcm9wcy5vcHRpb25zLmxlbmd0aCl9XG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIHNob3dEcm9wZG93bjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCFfdGhpcy5zdGF0ZS5pc0Ryb3Bkb3duVmlzaWJsZSkge1xuICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGlzRHJvcGRvd25WaXNpYmxlOiB0cnVlXG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vbkRyb3Bkb3duT3BlbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaGlkZURyb3Bkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAoX3RoaXMuc3RhdGUuaXNEcm9wZG93blZpc2libGUpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBpc0Ryb3Bkb3duVmlzaWJsZTogZmFsc2VcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uRHJvcGRvd25DbG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc2hvd0hpbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgICAgcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGlucHV0VmFsdWUgPSBwcm9wcy5pbnB1dFZhbHVlLFxuICAgICAgICAgICAgaW5wdXRWYWx1ZUxlbmd0aCA9IGlucHV0VmFsdWUubGVuZ3RoLFxuICAgICAgICAgICAgaXNIaW50VmlzaWJsZSA9IGlucHV0VmFsdWVMZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgLy8gQSB2aXNpYmxlIHBhcnQgb2YgdGhlIGhpbnQgbXVzdCBiZVxuICAgICAgICAgICAgICAgIC8vIGF2YWlsYWJsZSBmb3IgdXMgdG8gY29tcGxldGUgaXQuXG4gICAgICAgICAgICAgICAgcHJvcHMuaGFuZGxlSGludChpbnB1dFZhbHVlLCBwcm9wcy5vcHRpb25zKS5zbGljZShpbnB1dFZhbHVlTGVuZ3RoKS5sZW5ndGggPiAwO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGlzSGludFZpc2libGU6IGlzSGludFZpc2libGVcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIGhpZGVIaW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBpc0hpbnRWaXNpYmxlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgc2V0U2VsZWN0ZWRJbmRleDogZnVuY3Rpb24oaW5kZXgsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleDogaW5kZXhcbiAgICAgICAgfSwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICBoYW5kbGVDaGFuZ2U6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgX3RoaXMuc2hvd0hpbnQoKTtcbiAgICAgICAgX3RoaXMuc2hvd0Ryb3Bkb3duKCk7XG4gICAgICAgIF90aGlzLnNldFNlbGVjdGVkSW5kZXgoLTEpO1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZShldmVudCk7XG4gICAgICAgIF90aGlzLnVzZXJJbnB1dFZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgIH0sXG5cbiAgICBmb2N1czogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucmVmcy5pbnB1dC5nZXRET01Ob2RlKCkuZm9jdXMoKTtcbiAgICB9LFxuXG4gICAgaGFuZGxlRm9jdXM6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgX3RoaXMuc2hvd0Ryb3Bkb3duKCk7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRm9jdXMoZXZlbnQpO1xuICAgIH0sXG5cbiAgICBoYW5kbGVDbGljazogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBfdGhpcy5zaG93SGludCgpO1xuICAgICAgICBfdGhpcy5wcm9wcy5vbklucHV0Q2xpY2soZXZlbnQpO1xuICAgIH0sXG5cbiAgICBuYXZpZ2F0ZTogZnVuY3Rpb24oZGlyZWN0aW9uLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgICAgbWluSW5kZXggPSAtMSxcbiAgICAgICAgICAgIG1heEluZGV4ID0gX3RoaXMucHJvcHMub3B0aW9ucy5sZW5ndGggLSAxLFxuICAgICAgICAgICAgaW5kZXggPSBfdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4ICsgZGlyZWN0aW9uO1xuXG4gICAgICAgIGlmIChpbmRleCA+IG1heEluZGV4KSB7XG4gICAgICAgICAgICBpbmRleCA9IG1pbkluZGV4O1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4IDwgbWluSW5kZXgpIHtcbiAgICAgICAgICAgIGluZGV4ID0gbWF4SW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5zZXRTZWxlY3RlZEluZGV4KGluZGV4LCBjYWxsYmFjayk7XG4gICAgfSxcblxuICAgIGhhbmRsZUtleURvd246IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgICBrZXkgPSBldmVudC5rZXksXG4gICAgICAgICAgICBwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgaW5wdXQgPSBfdGhpcy5yZWZzLmlucHV0LFxuICAgICAgICAgICAgaXNEcm9wZG93blZpc2libGUgPSBfdGhpcy5zdGF0ZS5pc0Ryb3Bkb3duVmlzaWJsZSxcbiAgICAgICAgICAgIGlzSGludFZpc2libGUgPSBfdGhpcy5zdGF0ZS5pc0hpbnRWaXNpYmxlLFxuICAgICAgICAgICAgaGFzSGFuZGxlZEtleURvd24gPSBmYWxzZSxcbiAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgb3B0aW9uRGF0YSxcbiAgICAgICAgICAgIGRpcjtcblxuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlICdFbmQnOlxuICAgICAgICBjYXNlICdUYWInOlxuICAgICAgICAgICAgaWYgKGlzSGludFZpc2libGUgJiYgIWV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBwcm9wcy5vbkNvbXBsZXRlKGV2ZW50LCBwcm9wcy5oYW5kbGVIaW50KHByb3BzLmlucHV0VmFsdWUsIHByb3BzLm9wdGlvbnMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICBjYXNlICdBcnJvd1JpZ2h0JzpcbiAgICAgICAgICAgIGlmIChpc0hpbnRWaXNpYmxlICYmICFldmVudC5zaGlmdEtleSAmJiBpbnB1dC5pc0N1cnNvckF0RW5kKCkpIHtcbiAgICAgICAgICAgICAgICBkaXIgPSBnZXRUZXh0RGlyZWN0aW9uKHByb3BzLmlucHV0VmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKChkaXIgPT09ICdsdHInICYmIGtleSA9PT0gJ0Fycm93UmlnaHQnKSB8fCAoZGlyID09PSAncnRsJyAmJiBrZXkgPT09ICdBcnJvd0xlZnQnKSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wcy5vbkNvbXBsZXRlKGV2ZW50LCBwcm9wcy5oYW5kbGVIaW50KHByb3BzLmlucHV0VmFsdWUsIHByb3BzLm9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRW50ZXInOlxuICAgICAgICAgICAgX3RoaXMuZm9jdXMoKTtcbiAgICAgICAgICAgIF90aGlzLmhpZGVIaW50KCk7XG4gICAgICAgICAgICBfdGhpcy5oaWRlRHJvcGRvd24oKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdFc2NhcGUnOlxuICAgICAgICAgICAgX3RoaXMuaGlkZUhpbnQoKTtcbiAgICAgICAgICAgIF90aGlzLmhpZGVEcm9wZG93bigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICAgICAgaWYgKHByb3BzLm9wdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5zaG93SGludCgpO1xuICAgICAgICAgICAgICAgIF90aGlzLnNob3dEcm9wZG93bigpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzRHJvcGRvd25WaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpciA9IGtleSA9PT0gJ0Fycm93VXAnID8gLTE6IDE7XG4gICAgICAgICAgICAgICAgICAgIGhhc0hhbmRsZWRLZXlEb3duID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5uYXZpZ2F0ZShkaXIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSBfdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzSW5wdXRWYWx1ZSA9IF90aGlzLnByZXZpb3VzSW5wdXRWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25EYXRhID0gcHJldmlvdXNJbnB1dFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbk9mZnNldFRvcCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd247XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlJ3JlIGN1cnJlbnRseSBvbiBhbiBvcHRpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F2ZSB0aGUgY3VycmVudCBgaW5wdXRgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFzIHdlIG1pZ2h0IGFycm93IGJhY2sgdG8gaXQgbGF0ZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzSW5wdXRWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcmV2aW91c0lucHV0VmFsdWUgPSBwcm9wcy5pbnB1dFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkRhdGEgPSBwcm9wcy5vcHRpb25zW3NlbGVjdGVkSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc2VsZWN0ZWQgb3B0aW9uIGFsd2F5cyBzY3JvbGwgdG8gdmlzaWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duID0gUmVhY3QuZmluZERPTU5vZGUoX3RoaXMucmVmcy5kcm9wZG93bik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb24gPSBkcm9wZG93bi5jaGlsZHJlbltzZWxlY3RlZEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25PZmZzZXRUb3AgPSBzZWxlY3RlZE9wdGlvbi5vZmZzZXRUb3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYob3B0aW9uT2Zmc2V0VG9wICsgc2VsZWN0ZWRPcHRpb24uY2xpZW50SGVpZ2h0ID4gZHJvcGRvd24uY2xpZW50SGVpZ2h0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbk9mZnNldFRvcCA8IGRyb3Bkb3duLnNjcm9sbFRvcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi5zY3JvbGxUb3AgPSBvcHRpb25PZmZzZXRUb3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5vbk9wdGlvbkNoYW5nZShldmVudCwgb3B0aW9uRGF0YSwgc2VsZWN0ZWRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5vbktleURvd24oZXZlbnQsIG9wdGlvbkRhdGEsIHNlbGVjdGVkSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFoYXNIYW5kbGVkS2V5RG93bikge1xuICAgICAgICAgICAgaW5kZXggPSB0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXg7XG4gICAgICAgICAgICBvcHRpb25EYXRhID0gaW5kZXggPCAwID8gcHJvcHMuaW5wdXRWYWx1ZSA6IHByb3BzLm9wdGlvbnNbaW5kZXhdO1xuICAgICAgICAgICAgcHJvcHMub25LZXlEb3duKGV2ZW50LCBvcHRpb25EYXRhLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaGFuZGxlT3B0aW9uQ2xpY2s6IGZ1bmN0aW9uKHNlbGVjdGVkSW5kZXgsIGV2ZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgICBwcm9wcyA9IF90aGlzLnByb3BzO1xuXG4gICAgICAgIF90aGlzLmZvY3VzKCk7XG4gICAgICAgIF90aGlzLmhpZGVIaW50KCk7XG4gICAgICAgIF90aGlzLmhpZGVEcm9wZG93bigpO1xuICAgICAgICBfdGhpcy5zZXRTZWxlY3RlZEluZGV4KHNlbGVjdGVkSW5kZXgpO1xuICAgICAgICBwcm9wcy5vbk9wdGlvbkNsaWNrKGV2ZW50LCBwcm9wcy5vcHRpb25zW3NlbGVjdGVkSW5kZXhdLCBzZWxlY3RlZEluZGV4KTtcbiAgICB9LFxuXG4gICAgaGFuZGxlT3B0aW9uTW91c2VPdmVyOiBmdW5jdGlvbihzZWxlY3RlZEluZGV4KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF90aGlzLnByb3BzLmhvdmVyU2VsZWN0KSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTZWxlY3RlZEluZGV4KHNlbGVjdGVkSW5kZXgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGhhbmRsZU1vdXNlT3V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAoX3RoaXMucHJvcHMuaG92ZXJTZWxlY3QpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFNlbGVjdGVkSW5kZXgoLTEpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGhhbmRsZVdpbmRvd0Nsb3NlOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgICAgIGlmICh0YXJnZXQgIT09IHdpbmRvdyAmJiAhdGhpcy5nZXRET01Ob2RlKCkuY29udGFpbnModGFyZ2V0KSkge1xuICAgICAgICAgICAgX3RoaXMuaGlkZUhpbnQoKTtcbiAgICAgICAgICAgIF90aGlzLmhpZGVEcm9wZG93bigpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTloYm1SeVpYZHpkSFZqYTJrdlEyOWtaUzl5WldGamRDMTBlWEJsWVdobFlXUXRZMjl0Y0c5dVpXNTBMM055WXk5amIyMXdiMjVsYm5SekwzUjVjR1ZoYUdWaFpDNXFjM2dpWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQkxGbEJRVmtzUTBGQlF6czdRVUZGWWl4SlFVRkpMRXRCUVVzc1IwRkJSeXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETzBsQlEzaENMRXRCUVVzc1IwRkJSeXhQUVVGUExFTkJRVU1zWVVGQllTeERRVUZETzBsQlF6bENMRlZCUVZVc1IwRkJSeXhQUVVGUExFTkJRVU1zYlVKQlFXMUNMRU5CUVVNN1NVRkRla01zWjBKQlFXZENMRWRCUVVjc1QwRkJUeXhEUVVGRExEWkNRVUUyUWl4RFFVRkRPMEZCUXpkRUxFbEJRVWtzU1VGQlNTeEhRVUZITEZkQlFWY3NSVUZCUlN4RFFVRkRPenRCUVVWNlFpeE5RVUZOTEVOQlFVTXNUMEZCVHl4SFFVRkhMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU03UVVGRGJrTXNTVUZCU1N4WFFVRlhMRVZCUVVVc1YwRkJWenM3U1VGRmVFSXNUMEZCVHl4RlFVRkZPMUZCUTB3c1owSkJRV2RDTEVkQlFVY3NWMEZCVnp0QlFVTjBReXhaUVVGWkxFbEJRVWtzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXpzN1dVRkZaQ3hQUVVGUExGZEJRVmM3WjBKQlEyUXNUMEZCVHl4RlFVRkZMRXRCUVVzc1EwRkJRenRoUVVOc1FpeERRVUZETzFOQlEwd3NSVUZCUlN4RFFVRkRPMEZCUTFvc1MwRkJTenM3U1VGRlJDeFRRVUZUTEVWQlFVVXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhSUVVGUkxFdEJRVXNzV1VGQldTeEhRVUZITEVWQlFVVXNSMEZCUnp0UlFVTndSQ3hQUVVGUExFVkJRVVVzUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5PMUZCUXk5Q0xGTkJRVk1zUlVGQlJTeExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwN1VVRkRha01zVTBGQlV5eEZRVUZGTEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUVHRSUVVOcVF5eGxRVUZsTEVWQlFVVXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTk8xRkJRM1pETEZOQlFWTXNSVUZCUlN4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWs3VVVGREwwSXNWMEZCVnl4RlFVRkZMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNUdFJRVU5xUXl4VlFVRlZMRVZCUVVVc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTzFGQlEyeERMRTlCUVU4c1JVRkJSU3hMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEV0QlFVczdVVUZET1VJc1YwRkJWeXhGUVVGRkxFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFR0UlFVTnVReXhSUVVGUkxFVkJRVVVzUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpPMUZCUXpsQ0xGTkJRVk1zUlVGQlJTeExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrN1VVRkRMMElzVlVGQlZTeEZRVUZGTEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTVHRSUVVOb1F5eFBRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSk8xRkJRemRDTEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWs3VVVGRE4wSXNUVUZCVFN4RlFVRkZMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNUdFJRVU0xUWl4UlFVRlJMRVZCUVVVc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTzFGQlF6bENMRmxCUVZrc1JVRkJSU3hMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVazdVVUZEYkVNc1ZVRkJWU3hGUVVGRkxFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1R0UlFVTm9ReXhWUVVGVkxFVkJRVVVzUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpPMUZCUTJoRExHRkJRV0VzUlVGQlJTeExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrN1VVRkRia01zWTBGQll5eEZRVUZGTEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTVHRSUVVOd1F5eGpRVUZqTEVWQlFVVXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSk8xRkJRM0JETEdWQlFXVXNSVUZCUlN4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWs3VVVGRGNrTXNZMEZCWXl4RlFVRkZMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVTdVVUZETDBNc2JVSkJRVzFDTEVWQlFVVXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSk8xRkJRM3BETERSQ1FVRTBRaXhGUVVGRkxFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1R0QlFVTXhSQ3hMUVVGTE96dEpRVVZFTEdWQlFXVXNSVUZCUlN4WFFVRlhPMUZCUTNoQ0xFOUJRVTg3V1VGRFNDeFRRVUZUTEVWQlFVVXNSVUZCUlR0WlFVTmlMR1ZCUVdVc1JVRkJSU3hGUVVGRk8xbEJRMjVDTEZWQlFWVXNSVUZCUlN4RlFVRkZPMWxCUTJRc1QwRkJUeXhGUVVGRkxFVkJRVVU3V1VGRFdDeFhRVUZYTEVWQlFVVXNTVUZCU1R0WlFVTnFRaXhQUVVGUExFVkJRVVVzU1VGQlNUdFpRVU5pTEZOQlFWTXNSVUZCUlN4SlFVRkpPMWxCUTJZc1VVRkJVU3hGUVVGRkxFbEJRVWs3V1VGRFpDeFpRVUZaTEVWQlFVVXNTVUZCU1R0WlFVTnNRaXhWUVVGVkxFVkJRVVVzVjBGQlZ6dG5Ra0ZEYmtJc1QwRkJUeXhGUVVGRkxFTkJRVU03WVVGRFlqdFpRVU5FTEdGQlFXRXNSVUZCUlN4SlFVRkpPMWxCUTI1Q0xHTkJRV01zUlVGQlJTeEpRVUZKTzFsQlEzQkNMRlZCUVZVc1IwRkJSeXhKUVVGSk8xbEJRMnBDTEdOQlFXTXNSVUZCUlN4SlFVRkpPMWxCUTNCQ0xHVkJRV1VzUlVGQlJTeEpRVUZKTzFsQlEzSkNMRzFDUVVGdFFpeEZRVUZGTEZkQlFWYzdaMEpCUXpWQ0xFOUJRVThzUlVGQlJTeERRVUZETzJGQlEySTdXVUZEUkN3MFFrRkJORUlzUlVGQlJTeFRRVUZUTEUxQlFVMHNSVUZCUlR0blFrRkRNME03YjBKQlEwa3NUVUZCVFN4SFFVRkhMQ3RFUVVFclJEdHJRa0ZETVVVN1lVRkRURHRUUVVOS0xFTkJRVU03UVVGRFZpeE5RVUZOT3p0SlFVVkdMR1ZCUVdVc1JVRkJSU3hYUVVGWE8xRkJRM2hDTEU5QlFVODdXVUZEU0N4aFFVRmhMRVZCUVVVc1EwRkJReXhEUVVGRE8xbEJRMnBDTEdGQlFXRXNSVUZCUlN4TFFVRkxPMWxCUTNCQ0xHbENRVUZwUWl4RlFVRkZMRXRCUVVzN1UwRkRNMElzUTBGQlF6dEJRVU5XTEV0QlFVczdPMGxCUlVRc2EwSkJRV3RDTEVWQlFVVXNWMEZCVnp0UlFVTXpRaXhKUVVGSkxFdEJRVXNzUjBGQlJ5eEpRVUZKTzBGQlEzaENMRmxCUVZrc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzUTBGQlF6czdVVUZGYmtRc1MwRkJTeXhEUVVGRExHTkJRV01zUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZETlVJc1MwRkJTeXhEUVVGRExHdENRVUZyUWl4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVOb1F5eExRVUZMTEVOQlFVTXNhMEpCUVd0Q0xFZEJRVWNzYlVOQlFXMURMRWRCUVVjc1VVRkJVU3hEUVVGRE8xRkJRekZGTEV0QlFVc3NRMEZCUXl4VFFVRlRMRWRCUVVjc01FSkJRVEJDTEVkQlFVY3NVVUZCVVN4RFFVRkRPMEZCUTJoRkxFdEJRVXM3TzBsQlJVUXNhVUpCUVdsQ0xFVkJRVVVzVjBGQlZ6dFJRVU14UWl4SlFVRkpMRkZCUVZFc1IwRkJSeXhOUVVGTkxFTkJRVU1zWjBKQlFXZENPMEZCUXpsRExGbEJRVmtzYVVKQlFXbENMRWRCUVVjc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRPMEZCUTNaRU8wRkJRMEU3TzBGQlJVRXNVVUZCVVN4UlFVRlJMRU5CUVVNc1QwRkJUeXhGUVVGRkxHbENRVUZwUWl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMjVFT3p0UlFVVlJMRkZCUVZFc1EwRkJReXhQUVVGUExFVkJRVVVzYVVKQlFXbENMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRGNFUXNTMEZCU3pzN1NVRkZSQ3h2UWtGQmIwSXNSVUZCUlN4WFFVRlhPMUZCUXpkQ0xFbEJRVWtzVjBGQlZ5eEhRVUZITEUxQlFVMHNRMEZCUXl4dFFrRkJiVUk3UVVGRGNFUXNXVUZCV1N4cFFrRkJhVUlzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU03TzFGQlJTOURMRmRCUVZjc1EwRkJReXhQUVVGUExFVkJRVVVzYVVKQlFXbENMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRE9VTXNWMEZCVnl4RFFVRkRMRTlCUVU4c1JVRkJSU3hwUWtGQmFVSXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVOMlJDeExRVUZMT3p0SlFVVkVMSGxDUVVGNVFpeEZRVUZGTEZOQlFWTXNVMEZCVXl4RlFVRkZPMUZCUXpORExFbEJRVWtzVTBGQlV5eEhRVUZITEZOQlFWTXNRMEZCUXl4VlFVRlZPMWxCUTJoRExGZEJRVmNzUjBGQlJ5eFRRVUZUTEVOQlFVTXNUMEZCVHp0WlFVTXZRaXhYUVVGWExFZEJRVWNzVTBGQlV5eERRVUZETEUxQlFVMDdRVUZETVVNc1dVRkJXU3hoUVVGaExFZEJRVWNzVjBGQlZ5eEhRVUZITEVOQlFVTTdRVUZETTBNN08wRkJSVUVzWjBKQlFXZENMRk5CUVZNc1EwRkJReXhWUVVGVkxFTkJRVU1zVTBGQlV5eEZRVUZGTEZkQlFWY3NRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RFFVRkRPenRSUVVWdVJpeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRPMWxCUTFZc1lVRkJZU3hGUVVGRkxHRkJRV0U3VTBGREwwSXNRMEZCUXl4RFFVRkRPMEZCUTFnc1MwRkJTenM3U1VGRlJDeE5RVUZOTEVWQlFVVXNWMEZCVnp0QlFVTjJRaXhSUVVGUkxFbEJRVWtzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXpzN1VVRkZha0k3V1VGRFNTeHZRa0ZCUVN4TFFVRkpMRVZCUVVFc1EwRkJRVHRuUWtGRFFTeExRVUZCTEVWQlFVc3NRMEZCUlR0dlFrRkRTQ3hSUVVGUkxFVkJRVVVzVlVGQlZUdHBRa0ZEZGtJc1JVRkJRenRuUWtGRFJpeFRRVUZCTEVWQlFWTXNRMEZCUlN3MFFrRkJORUlzUjBGQlJ5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZjc1EwRkJRU3hGUVVGQk8yZENRVU5vUlN4TFFVRkxMRU5CUVVNc1YwRkJWeXhGUVVGRkxFVkJRVU03WjBKQlEzQkNMRXRCUVVzc1EwRkJReXhqUVVGakxFVkJRVVVzUlVGQlF6dG5Ra0ZEZGtJc1MwRkJTeXhEUVVGRExESkNRVUV5UWl4RlFVRkZMRVZCUVVNN1owSkJRM0JETEV0QlFVc3NRMEZCUXl4dFEwRkJiVU1zUlVGQlJ6dFpRVU16UXl4RFFVRkJPMVZCUTFJN1FVRkRWaXhMUVVGTE96dEpRVVZFTEZkQlFWY3NSVUZCUlN4WFFVRlhPMUZCUTNCQ0xFbEJRVWtzUzBGQlN5eEhRVUZITEVsQlFVazdXVUZEV2l4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXM3V1VGRGJrSXNTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJReXhMUVVGTE8xbEJRMjVDTEZWQlFWVXNSMEZCUnl4TFFVRkxMRU5CUVVNc1ZVRkJWVHRaUVVNM1FpeFRRVUZUTEVkQlFVY3NkVUpCUVhWQ08wRkJReTlETEZsQlFWa3NZMEZCWXl4SFFVRkhMR2RDUVVGblFpeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPenRSUVVWc1JEdFpRVU5KTEc5Q1FVRkJMRXRCUVVrc1JVRkJRU3hEUVVGQk8yZENRVU5CTEV0QlFVRXNSVUZCU3l4RFFVRkZPMjlDUVVOSUxGRkJRVkVzUlVGQlJTeFZRVUZWTzJsQ1FVTjJRaXhGUVVGRE8yZENRVU5HTEZOQlFVRXNSVUZCVXl4RFFVRkRMR2xEUVVGclF5eERRVUZCTEVWQlFVRTdaMEpCUXpWRExHOUNRVUZETEV0QlFVc3NSVUZCUVN4RFFVRkJPMjlDUVVOR0xGRkJRVUVzUlVGQlVTeERRVUZGTEVsQlFVa3NSVUZCUXp0dlFrRkRaaXhKUVVGQkxFVkJRVWtzUTBGQlF5eGpRVUZCTEVWQlFXTTdiMEpCUTI1Q0xHRkJRVUVzUlVGQlZ5eERRVUZGTEVsQlFVa3NSVUZCUXp0dlFrRkRiRUlzUjBGQlFTeEZRVUZITEVOQlFVVXNZMEZCWXl4RlFVRkRPMjlDUVVOd1FpeFRRVUZCTEVWQlFWTXNRMEZCUlN4VFFVRlRMRWRCUVVjc2RVSkJRWFZDTEVkQlFVY3NTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhsUVVGbExFVkJRVU03YjBKQlF6ZEZMRXRCUVVFc1JVRkJTeXhEUVVGRk8zZENRVU5JTEV0QlFVc3NSVUZCUlN4UlFVRlJPM2RDUVVObUxHMUNRVUZ0UWl4RlFVRkZMRkZCUVZFN2QwSkJRemRDTEZGQlFWRXNSVUZCUlN4VlFVRlZPM0ZDUVVOMlFpeEZRVUZETzI5Q1FVTkdMRXRCUVVFc1JVRkJTeXhEUVVGRkxFdEJRVXNzUTBGQlF5eGhRVUZoTEVkQlFVY3NTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhWUVVGVkxFVkJRVVVzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRWxCUVVzc1EwRkJRVHRuUWtGRGJFWXNRMEZCUVN4RlFVRkJPMmRDUVVOR0xHOUNRVUZETEV0QlFVc3NSVUZCUVN4RFFVRkJPMjlDUVVOR0xFZEJRVUVzUlVGQlJ5eERRVUZETEU5QlFVRXNSVUZCVHp0dlFrRkRXQ3hKUVVGQkxFVkJRVWtzUTBGQlF5eFZRVUZCTEVWQlFWVTdiMEpCUTJZc1YwRkJRU3hGUVVGVExFTkJRVVVzUzBGQlN5eERRVUZETEZOQlFWTXNSVUZCUXp0dlFrRkRNMElzWlVGQlFTeEZRVUZoTEVOQlFVVXNTMEZCU3l4RFFVRkRMR2xDUVVGcFFpeEZRVUZETzI5Q1FVTjJReXh0UWtGQlFTeEZRVUZwUWl4RFFVRkRMRTFCUVVFc1JVRkJUVHR2UWtGRGVFSXNkVUpCUVVFc1JVRkJjVUlzUTBGQlJTeExRVUZMTEVOQlFVTXNhMEpCUVd0Q0xFVkJRVU03YjBKQlEyaEVMRXRCUVVFc1JVRkJTeXhEUVVGRkxGVkJRVlVzUlVGQlF6dHZRa0ZEYkVJc1ZVRkJRU3hGUVVGVkxFTkJRVVVzUzBGQlN5eEZRVUZETzI5Q1FVTnNRaXhaUVVGQkxFVkJRVmtzUTBGQlJTeExRVUZMTEVWQlFVTTdiMEpCUTNCQ0xGZEJRVUVzUlVGQlZ5eERRVUZGTEV0QlFVc3NSVUZCUXp0dlFrRkRia0lzUjBGQlFTeEZRVUZITEVOQlFVVXNZMEZCWXl4RlFVRkRPMjlDUVVOd1FpeFBRVUZCTEVWQlFVOHNRMEZCUlN4TFFVRkxMRU5CUVVNc1YwRkJWeXhGUVVGRE8yOUNRVU16UWl4UFFVRkJMRVZCUVU4c1EwRkJSU3hMUVVGTExFTkJRVU1zVjBGQlZ5eEZRVUZETzI5Q1FVTXpRaXhOUVVGQkxFVkJRVTBzUTBGQlJTeExRVUZMTEVOQlFVTXNUVUZCVFN4RlFVRkRPMjlDUVVOeVFpeFJRVUZCTEVWQlFWRXNRMEZCUlN4TFFVRkxMRU5CUVVNc1dVRkJXU3hGUVVGRE8yOUNRVU0zUWl4VFFVRkJMRVZCUVZNc1EwRkJSU3hMUVVGTExFTkJRVU1zWVVGQllTeEZRVUZETzI5Q1FVTXZRaXhGUVVGQkxFVkJRVVVzUTBGQlJTeExRVUZMTEVOQlFVTXNUMEZCVHl4RlFVRkRPMjlDUVVOc1FpeEpRVUZCTEVWQlFVa3NRMEZCUlN4TFFVRkxMRU5CUVVNc1UwRkJVeXhGUVVGRE8yOUNRVU4wUWl4VFFVRkJMRVZCUVZNc1EwRkJSU3hMUVVGTExFTkJRVU1zVTBGQlV5eEZRVUZETzI5Q1FVTXpRaXhYUVVGQkxFVkJRVmNzUTBGQlJTeExRVUZMTEVOQlFVTXNWMEZCVnl4RlFVRkRPMjlDUVVNdlFpeFJRVUZCTEVWQlFWRXNRMEZCUlN4TFFVRkxMRU5CUVVNc1VVRkJVU3hGUVVGRE8yOUNRVU42UWl4UFFVRkJMRVZCUVU4c1EwRkJSU3hMUVVGTExFTkJRVU1zVDBGQlR5eEZRVUZETzI5Q1FVTjJRaXhWUVVGQkxFVkJRVlVzUTBGQlJTeExRVUZMTEVOQlFVTXNWVUZCVlN4RlFVRkRPMjlDUVVNM1FpeFRRVUZCTEVWQlFWTXNRMEZCUlN4VFFVRlRMRWRCUVVjc01rSkJRVEpDTEVkQlFVY3NTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhsUVVGbExFVkJRVU03YjBKQlEycEdMRXRCUVVFc1JVRkJTeXhEUVVGRk8zZENRVU5JTEZGQlFWRXNSVUZCUlN4VlFVRlZPM2RDUVVOd1FpeFZRVUZWTEVWQlFVVXNZVUZCWVR0eFFrRkRNMElzUTBGQlFUdG5Ra0ZEU2l4RFFVRkJPMWxCUTBFc1EwRkJRVHRWUVVOU08wRkJRMVlzUzBGQlN6czdTVUZGUkN4alFVRmpMRVZCUVVVc1YwRkJWenRSUVVOMlFpeEpRVUZKTEV0QlFVc3NSMEZCUnl4SlFVRkpPMWxCUTFvc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTzFsQlEyNUNMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN6dFpRVU51UWl4alFVRmpMRWRCUVVjc1MwRkJTeXhEUVVGRExHTkJRV003V1VGRGNrTXNZVUZCWVN4SFFVRkhMRXRCUVVzc1EwRkJReXhoUVVGaE8xbEJRMjVETEdsQ1FVRnBRaXhIUVVGSExFdEJRVXNzUTBGQlF5eHBRa0ZCYVVJN1FVRkRka1FzV1VGQldTeHJRa0ZCYTBJc1IwRkJSeXhMUVVGTExFTkJRVU1zYTBKQlFXdENMRU5CUVVNN08xRkJSV3hFTEVsQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNSVUZCUlR0WlFVTXZRaXhQUVVGUExFbEJRVWtzUTBGQlF6dEJRVU40UWl4VFFVRlRPenRSUVVWRU8xbEJRMGtzYjBKQlFVRXNTVUZCUnl4RlFVRkJMRU5CUVVFc1EwRkJReXhGUVVGQkxFVkJRVVVzUTBGQlJTeExRVUZMTEVOQlFVTXNVMEZCVXl4RlFVRkRPMmRDUVVOd1FpeEhRVUZCTEVWQlFVY3NRMEZCUXl4VlFVRkJMRVZCUVZVN1owSkJRMlFzU1VGQlFTeEZRVUZKTEVOQlFVTXNVMEZCUVN4RlFVRlRPMmRDUVVOa0xHRkJRVUVzUlVGQlZ5eERRVUZGTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVU03WjBKQlEyaERMRXRCUVVFc1JVRkJTeXhEUVVGRk8yOUNRVU5JTEV0QlFVc3NSVUZCUlN4TlFVRk5PMjlDUVVOaUxGVkJRVlVzUlVGQlJTeE5RVUZOTzI5Q1FVTnNRaXhSUVVGUkxFVkJRVVVzVlVGQlZUdHZRa0ZEY0VJc1UwRkJVeXhGUVVGRkxGbEJRVms3YjBKQlEzWkNMRTlCUVU4c1JVRkJSU3hwUWtGQmFVSXNSMEZCUnl4UFFVRlBMRWRCUVVjc1RVRkJUVHRwUWtGRGFFUXNSVUZCUXp0blFrRkRSaXhUUVVGQkxFVkJRVk1zUTBGQlF5eDVRa0ZCUVN4RlFVRjVRanRuUWtGRGJrTXNWVUZCUVN4RlFVRlZMRU5CUVVVc1NVRkJTU3hEUVVGRExHTkJRV2RDTEVOQlFVRXNSVUZCUVR0blFrRkRhRU03YjBKQlEwY3NTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zVTBGQlV5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RlFVRkZPMEZCUXpWRUxIZENRVUYzUWl4SlFVRkpMRlZCUVZVc1IwRkJSeXhoUVVGaExFdEJRVXNzUzBGQlN5eERRVUZET3p0M1FrRkZla003TkVKQlEwa3NiMEpCUVVFc1NVRkJSeXhGUVVGQkxFTkJRVUVzUTBGQlF5eEZRVUZCTEVWQlFVVXNRMEZCUlN4VlFVRlZMRWRCUVVjc2EwSkJRV3RDTEVkQlFVY3NTVUZCU1N4RlFVRkRPMmREUVVNelF5eGxRVUZCTEVWQlFXRXNRMEZCUlN4VlFVRlZMRVZCUVVNN1owTkJRekZDTEVsQlFVRXNSVUZCU1N4RFFVRkRMRkZCUVVFc1JVRkJVVHRuUTBGRFlpeEhRVUZCTEVWQlFVY3NRMEZCUlN4TFFVRkxMRVZCUVVNN1owTkJRMWdzVDBGQlFTeEZRVUZQTEVOQlFVVXNTMEZCU3l4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhEUVVGRExFVkJRVU03UVVGRGNFWXNaME5CUVdkRExGZEJRVUVzUlVGQlZ5eERRVUZGTEV0QlFVc3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRXRCUVVzc1EwRkJSeXhEUVVGQkxFVkJRVUU3TzJkRFFVVTNSQ3h2UWtGQlF5eGpRVUZqTEVWQlFVRXNRMEZCUVR0dlEwRkRXQ3hKUVVGQkxFVkJRVWtzUTBGQlJTeEpRVUZKTEVWQlFVTTdiME5CUTFnc1MwRkJRU3hGUVVGTExFTkJRVVVzUzBGQlN5eEZRVUZETzI5RFFVTmlMR05CUVVFc1JVRkJZeXhEUVVGRkxFdEJRVXNzUTBGQlF5eGpRVUZqTEVWQlFVTTdiME5CUTNKRExGVkJRVUVzUlVGQlZTeERRVUZGTEV0QlFVc3NRMEZCUXl4VlFVRlZMRVZCUVVNN2IwTkJRemRDTEZWQlFVRXNSVUZCVlN4RFFVRkZMRlZCUVZjc1EwRkJRVHRuUTBGRGVrSXNRMEZCUVRzMFFrRkRSQ3hEUVVGQk96QkNRVU5RTzNGQ1FVTk1PMmRDUVVOS08xbEJRMEVzUTBGQlFUdFZRVU5RTzBGQlExWXNTMEZCU3pzN1NVRkZSQ3d5UWtGQk1rSXNSVUZCUlN4WFFVRlhPMUZCUTNCRExFbEJRVWtzUzBGQlN5eEhRVUZITEVsQlFVazdXVUZEV2l4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXM3V1VGRGJrSXNWVUZCVlN4SFFVRkhMRXRCUVVzc1EwRkJReXhWUVVGVk8wRkJRM3BETEZsQlFWa3NUVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4aFFVRmhMRU5CUVVNc1NVRkJTU3hWUVVGVkxFTkJRVU03TzFGQlJYQkZPMWxCUTBrc2IwSkJRVU1zVlVGQlZTeEZRVUZCTEVOQlFVRTdaMEpCUTFBc1QwRkJRU3hGUVVGUExFTkJRVVVzUzBGQlN5eERRVUZETEcxQ1FVRnRRaXhEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEZWQlFWY3NRMEZCUVR0WlFVTXpSQ3hEUVVGQk8xVkJRMG83UVVGRFZpeExRVUZMT3p0SlFVVkVMRzFEUVVGdFF5eEZRVUZGTEZkQlFWYzdRVUZEY0VRc1VVRkJVU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRPenRSUVVWMlFqdFpRVU5KTEc5Q1FVRkRMRlZCUVZVc1JVRkJRU3hEUVVGQk8yZENRVU5RTEU5QlFVRXNSVUZCVHl4RFFVRkZMRXRCUVVzc1EwRkJReXcwUWtGQk5FSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlJTeERRVUZCTzFsQlEzQkZMRU5CUVVFN1ZVRkRTanRCUVVOV0xFdEJRVXM3TzBsQlJVUXNXVUZCV1N4RlFVRkZMRmRCUVZjN1FVRkROMElzVVVGQlVTeEpRVUZKTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNN08xRkJSV3BDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExHbENRVUZwUWl4RlFVRkZPMWxCUTJoRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTTdaMEpCUTFnc2FVSkJRV2xDTEVWQlFVVXNTVUZCU1R0aFFVTXhRaXhGUVVGRkxGZEJRVmM3WjBKQlExWXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlF6dGhRVU5vUXl4RFFVRkRMRU5CUVVNN1UwRkRUanRCUVVOVUxFdEJRVXM3TzBsQlJVUXNXVUZCV1N4RlFVRkZMRmRCUVZjN1FVRkROMElzVVVGQlVTeEpRVUZKTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNN08xRkJSV3BDTEVsQlFVa3NTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhwUWtGQmFVSXNSVUZCUlR0WlFVTXZRaXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETzJkQ1FVTllMR2xDUVVGcFFpeEZRVUZGTEV0QlFVczdZVUZETTBJc1JVRkJSU3hYUVVGWE8yZENRVU5XTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1pVRkJaU3hGUVVGRkxFTkJRVU03WVVGRGFrTXNRMEZCUXl4RFFVRkRPMU5CUTA0N1FVRkRWQ3hMUVVGTE96dEpRVVZFTEZGQlFWRXNSVUZCUlN4WFFVRlhPMUZCUTJwQ0xFbEJRVWtzUzBGQlN5eEhRVUZITEVsQlFVazdXVUZEV2l4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXM3V1VGRGJrSXNWVUZCVlN4SFFVRkhMRXRCUVVzc1EwRkJReXhWUVVGVk8xbEJRemRDTEdkQ1FVRm5RaXhIUVVGSExGVkJRVlVzUTBGQlF5eE5RVUZOTzBGQlEyaEVMRmxCUVZrc1lVRkJZU3hIUVVGSExHZENRVUZuUWl4SFFVRkhMRU5CUVVNN1FVRkRhRVE3TzBGQlJVRXNaMEpCUVdkQ0xFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVTXNWVUZCVlN4RlFVRkZMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RFFVRkRPenRSUVVWMlJpeExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRPMWxCUTFnc1lVRkJZU3hGUVVGRkxHRkJRV0U3VTBGREwwSXNRMEZCUXl4RFFVRkRPMEZCUTFnc1MwRkJTenM3U1VGRlJDeFJRVUZSTEVWQlFVVXNWMEZCVnp0UlFVTnFRaXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETzFsQlExWXNZVUZCWVN4RlFVRkZMRXRCUVVzN1UwRkRka0lzUTBGQlF5eERRVUZETzBGQlExZ3NTMEZCU3pzN1NVRkZSQ3huUWtGQlowSXNSVUZCUlN4VFFVRlRMRXRCUVVzc1JVRkJSU3hSUVVGUkxFVkJRVVU3VVVGRGVFTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJRenRaUVVOV0xHRkJRV0VzUlVGQlJTeExRVUZMTzFOQlEzWkNMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRGNrSXNTMEZCU3pzN1NVRkZSQ3haUVVGWkxFVkJRVVVzVTBGQlV5eExRVUZMTEVWQlFVVTdRVUZEYkVNc1VVRkJVU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTTdPMUZCUldwQ0xFdEJRVXNzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXp0UlFVTnFRaXhMUVVGTExFTkJRVU1zV1VGQldTeEZRVUZGTEVOQlFVTTdVVUZEY2tJc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE0wSXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdVVUZETlVJc1MwRkJTeXhEUVVGRExHTkJRV01zUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJRenRCUVVOc1JDeExRVUZMT3p0SlFVVkVMRXRCUVVzc1JVRkJSU3hYUVVGWE8xRkJRMlFzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdRVUZETjBNc1MwRkJTenM3U1VGRlJDeFhRVUZYTEVWQlFVVXNVMEZCVXl4TFFVRkxMRVZCUVVVN1FVRkRha01zVVVGQlVTeEpRVUZKTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNN08xRkJSV3BDTEV0QlFVc3NRMEZCUXl4WlFVRlpMRVZCUVVVc1EwRkJRenRSUVVOeVFpeExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEJRVU51UXl4TFFVRkxPenRKUVVWRUxGZEJRVmNzUlVGQlJTeFRRVUZUTEV0QlFVc3NSVUZCUlR0QlFVTnFReXhSUVVGUkxFbEJRVWtzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXpzN1VVRkZha0lzUzBGQlN5eERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPMUZCUTJwQ0xFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNXVUZCV1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wRkJRM2hETEV0QlFVczdPMGxCUlVRc1VVRkJVU3hGUVVGRkxGTkJRVk1zVTBGQlV5eEZRVUZGTEZGQlFWRXNSVUZCUlR0UlFVTndReXhKUVVGSkxFdEJRVXNzUjBGQlJ5eEpRVUZKTzFsQlExb3NVVUZCVVN4SFFVRkhMRU5CUVVNc1EwRkJRenRaUVVOaUxGRkJRVkVzUjBGQlJ5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF6dEJRVU55UkN4WlFVRlpMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEdGQlFXRXNSMEZCUnl4VFFVRlRMRU5CUVVNN08xRkJSV3hFTEVsQlFVa3NTMEZCU3l4SFFVRkhMRkZCUVZFc1JVRkJSVHRaUVVOc1FpeExRVUZMTEVkQlFVY3NVVUZCVVN4RFFVRkRPMU5CUTNCQ0xFMUJRVTBzU1VGQlNTeExRVUZMTEVkQlFVY3NVVUZCVVN4RlFVRkZPMWxCUTNwQ0xFdEJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTTdRVUZETjBJc1UwRkJVenM3VVVGRlJDeExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUzBGQlN5eEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPMEZCUTJoRUxFdEJRVXM3TzBsQlJVUXNZVUZCWVN4RlFVRkZMRk5CUVZNc1MwRkJTeXhGUVVGRk8xRkJRek5DTEVsQlFVa3NTMEZCU3l4SFFVRkhMRWxCUVVrN1dVRkRXaXhIUVVGSExFZEJRVWNzUzBGQlN5eERRVUZETEVkQlFVYzdXVUZEWml4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXM3V1VGRGJrSXNTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN6dFpRVU40UWl4cFFrRkJhVUlzUjBGQlJ5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMR2xDUVVGcFFqdFpRVU5xUkN4aFFVRmhMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eGhRVUZoTzFsQlEzcERMR2xDUVVGcFFpeEhRVUZITEV0QlFVczdXVUZEZWtJc1MwRkJTenRaUVVOTUxGVkJRVlU3UVVGRGRFSXNXVUZCV1N4SFFVRkhMRU5CUVVNN08xRkJSVklzVVVGQlVTeEhRVUZITzFGQlExZ3NTMEZCU3l4TFFVRkxMRU5CUVVNN1VVRkRXQ3hMUVVGTExFdEJRVXM3V1VGRFRpeEpRVUZKTEdGQlFXRXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFVkJRVVU3WjBKQlEyeERMRXRCUVVzc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlF6dG5Ra0ZEZGtJc1MwRkJTeXhEUVVGRExGVkJRVlVzUTBGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRlZCUVZVc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlZTeEZRVUZGTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRE8yRkJRemxGTzFsQlEwUXNUVUZCVFR0UlFVTldMRXRCUVVzc1YwRkJWeXhEUVVGRE8xRkJRMnBDTEV0QlFVc3NXVUZCV1R0WlFVTmlMRWxCUVVrc1lVRkJZU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNTVUZCU1N4TFFVRkxMRU5CUVVNc1lVRkJZU3hGUVVGRkxFVkJRVVU3UVVGRE0wVXNaMEpCUVdkQ0xFZEJRVWNzUjBGQlJ5eG5Ra0ZCWjBJc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdPMmRDUVVWNlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4TFFVRkxMRXRCUVVzc1NVRkJTU3hIUVVGSExFdEJRVXNzV1VGQldTeE5RVUZOTEVkQlFVY3NTMEZCU3l4TFFVRkxMRWxCUVVrc1IwRkJSeXhMUVVGTExGZEJRVmNzUTBGQlF5eEZRVUZGTzI5Q1FVTnVSaXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEV0QlFVc3NSVUZCUlN4TFFVRkxMRU5CUVVNc1ZVRkJWU3hEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTEVWQlFVVXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU03YVVKQlF6bEZPMkZCUTBvN1dVRkRSQ3hOUVVGTk8xRkJRMVlzUzBGQlN5eFBRVUZQTzFsQlExSXNTMEZCU3l4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8xbEJRMlFzUzBGQlN5eERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPMWxCUTJwQ0xFdEJRVXNzUTBGQlF5eFpRVUZaTEVWQlFVVXNRMEZCUXp0WlFVTnlRaXhOUVVGTk8xRkJRMVlzUzBGQlN5eFJRVUZSTzFsQlExUXNTMEZCU3l4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRE8xbEJRMnBDTEV0QlFVc3NRMEZCUXl4WlFVRlpMRVZCUVVVc1EwRkJRenRaUVVOeVFpeE5RVUZOTzFGQlExWXNTMEZCU3l4VFFVRlRMRU5CUVVNN1VVRkRaaXhMUVVGTExGZEJRVmM3V1VGRFdpeEpRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUlVGQlJUdEJRVU14UXl4blFrRkJaMElzUzBGQlN5eERRVUZETEdOQlFXTXNSVUZCUlN4RFFVRkRPenRuUWtGRmRrSXNTMEZCU3l4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRE8wRkJRMnBETEdkQ1FVRm5RaXhMUVVGTExFTkJRVU1zV1VGQldTeEZRVUZGTEVOQlFVTTdPMmRDUVVWeVFpeEpRVUZKTEdsQ1FVRnBRaXhGUVVGRk8yOUNRVU51UWl4SFFVRkhMRWRCUVVjc1IwRkJSeXhMUVVGTExGTkJRVk1zUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRjRVFzYjBKQlFXOUNMR2xDUVVGcFFpeEhRVUZITEVsQlFVa3NRMEZCUXpzN2IwSkJSWHBDTEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXhGUVVGRkxGZEJRVmM3ZDBKQlF6TkNMRWxCUVVrc1lVRkJZU3hIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNZVUZCWVRzMFFrRkRla01zYTBKQlFXdENMRWRCUVVjc1MwRkJTeXhEUVVGRExHdENRVUZyUWpzMFFrRkROME1zVlVGQlZTeEhRVUZITEd0Q1FVRnJRanMwUWtGREwwSXNaVUZCWlN4SFFVRkhMRU5CUVVNN05FSkJRMjVDTEdOQlFXTTdRVUZETVVNc05FSkJRVFJDTEZGQlFWRXNRMEZCUXp0QlFVTnlRenM3UVVGRlFTeDNRa0ZCZDBJc1NVRkJTU3hoUVVGaExFbEJRVWtzUTBGQlF5eEZRVUZGTzBGQlEyaEVPenMwUWtGRk5FSXNTVUZCU1N4clFrRkJhMElzUzBGQlN5eEpRVUZKTEVWQlFVVTdaME5CUXpkQ0xFdEJRVXNzUTBGQlF5eHJRa0ZCYTBJc1IwRkJSeXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETzBGQlF6VkZMRFpDUVVFMlFqczdRVUZGTjBJc05FSkJRVFJDTEZWQlFWVXNSMEZCUnl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZET3pzMFFrRkZNVU1zVVVGQlVTeEhRVUZITEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXpzMFFrRkRiRVFzWTBGQll5eEhRVUZITEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03TkVKQlEyeEVMR1ZCUVdVc1IwRkJSeXhqUVVGakxFTkJRVU1zVTBGQlV5eERRVUZET3pSQ1FVTXpReXhIUVVGSExHVkJRV1VzUjBGQlJ5eGpRVUZqTEVOQlFVTXNXVUZCV1N4SFFVRkhMRkZCUVZFc1EwRkJReXhaUVVGWk8yZERRVU53UlN4bFFVRmxMRWRCUVVjc1VVRkJVU3hEUVVGRExGTkJRVk1zUlVGQlJUdG5RMEZEZEVNc1VVRkJVU3hEUVVGRExGTkJRVk1zUjBGQlJ5eGxRVUZsTEVOQlFVTTdOa0pCUTNoRE8wRkJRemRDTEhsQ1FVRjVRanM3ZDBKQlJVUXNTMEZCU3l4RFFVRkRMR05CUVdNc1EwRkJReXhMUVVGTExFVkJRVVVzVlVGQlZTeEZRVUZGTEdGQlFXRXNRMEZCUXl4RFFVRkRPM2RDUVVOMlJDeExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hWUVVGVkxFVkJRVVVzWVVGQllTeERRVUZETEVOQlFVTTdjVUpCUTNKRUxFTkJRVU1zUTBGQlF6dHBRa0ZEVGp0QlFVTnFRaXhoUVVGaE96dFpRVVZFTEUxQlFVMDdRVUZEYkVJc1UwRkJVenM3VVVGRlJDeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVU3V1VGRGNFSXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zWVVGQllTeERRVUZETzFsQlEycERMRlZCUVZVc1IwRkJSeXhMUVVGTExFZEJRVWNzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXl4VlFVRlZMRWRCUVVjc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0WlFVTnFSU3hMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEV0QlFVc3NSVUZCUlN4VlFVRlZMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03VTBGRE4wTTdRVUZEVkN4TFFVRkxPenRKUVVWRUxHbENRVUZwUWl4RlFVRkZMRk5CUVZNc1lVRkJZU3hGUVVGRkxFdEJRVXNzUlVGQlJUdFJRVU01UXl4SlFVRkpMRXRCUVVzc1IwRkJSeXhKUVVGSk8wRkJRM2hDTEZsQlFWa3NTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU03TzFGQlJYaENMRXRCUVVzc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF6dFJRVU5rTEV0QlFVc3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJRenRSUVVOcVFpeExRVUZMTEVOQlFVTXNXVUZCV1N4RlFVRkZMRU5CUVVNN1VVRkRja0lzUzBGQlN5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZETzFGQlEzUkRMRXRCUVVzc1EwRkJReXhoUVVGaExFTkJRVU1zUzBGQlN5eEZRVUZGTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1lVRkJZU3hEUVVGRExFVkJRVVVzWVVGQllTeERRVUZETEVOQlFVTTdRVUZEYUVZc1MwRkJTenM3U1VGRlJDeHhRa0ZCY1VJc1JVRkJSU3hUUVVGVExHRkJRV0VzUlVGQlJUdEJRVU51UkN4UlFVRlJMRWxCUVVrc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF6czdVVUZGYWtJc1NVRkJTU3hMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEZkQlFWY3NSVUZCUlR0WlFVTjZRaXhMUVVGTExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03VTBGRGVrTTdRVUZEVkN4TFFVRkxPenRKUVVWRUxHTkJRV01zUlVGQlJTeFhRVUZYTzBGQlF5OUNMRkZCUVZFc1NVRkJTU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZET3p0UlFVVnFRaXhKUVVGSkxFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RlFVRkZPMWxCUTNwQ0xFdEJRVXNzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFOQlF6bENPMEZCUTFRc1MwRkJTenM3U1VGRlJDeHBRa0ZCYVVJc1JVRkJSU3hUUVVGVExFdEJRVXNzUlVGQlJUdFJRVU12UWl4SlFVRkpMRXRCUVVzc1IwRkJSeXhKUVVGSk8wRkJRM2hDTEZsQlFWa3NUVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU03TzFGQlJURkNMRWxCUVVrc1RVRkJUU3hMUVVGTExFMUJRVTBzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJReXhSUVVGUkxFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVTdXVUZETVVRc1MwRkJTeXhEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETzFsQlEycENMRXRCUVVzc1EwRkJReXhaUVVGWkxFVkJRVVVzUTBGQlF6dFRRVU40UWp0TFFVTktPME5CUTBvc1EwRkJReXhEUVVGRElpd2labWxzWlNJNkltZGxibVZ5WVhSbFpDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUluZFhObElITjBjbWxqZENjN1hHNWNiblpoY2lCU1pXRmpkQ0E5SUhKbGNYVnBjbVVvSjNKbFlXTjBKeWtzWEc0Z0lDQWdTVzV3ZFhRZ1BTQnlaWEYxYVhKbEtDY3VMMmx1Y0hWMExtcHplQ2NwTEZ4dUlDQWdJRUZ5YVdGVGRHRjBkWE1nUFNCeVpYRjFhWEpsS0NjdUwyRnlhV0ZmYzNSaGRIVnpMbXB6ZUNjcExGeHVJQ0FnSUdkbGRGUmxlSFJFYVhKbFkzUnBiMjRnUFNCeVpYRjFhWEpsS0NjdUxpOTFkR2xzY3k5blpYUmZkR1Y0ZEY5a2FYSmxZM1JwYjI0bktTeGNiaUFnSUNCdWIyOXdJRDBnWm5WdVkzUnBiMjRvS1NCN2ZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JTWldGamRDNWpjbVZoZEdWRGJHRnpjeWg3WEc0Z0lDQWdaR2x6Y0d4aGVVNWhiV1U2SUNkVWVYQmxZV2hsWVdRbkxGeHVYRzRnSUNBZ2MzUmhkR2xqY3pvZ2UxeHVJQ0FnSUNBZ0lDQm5aWFJKYm5OMFlXNWpaVU52ZFc1ME9pQW9ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWTI5MWJuUWdQU0F3TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ3NyWTI5MWJuUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjlLQ2twWEc0Z0lDQWdmU3hjYmx4dUlDQWdJSEJ5YjNCVWVYQmxjem9nY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1BUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lIdDlJRG9nZTF4dUlDQWdJQ0FnSUNCcGJuQjFkRWxrT2lCU1pXRmpkQzVRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lDQWdJQ0JwYm5CMWRFNWhiV1U2SUZKbFlXTjBMbEJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ0lDQWdJR05zWVhOelRtRnRaVG9nVW1WaFkzUXVVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNBZ0lDQWdibVZ6ZEdWa1EyeGhjM05PWVcxbE9pQlNaV0ZqZEM1UWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJQ0FnSUNCaGRYUnZSbTlqZFhNNklGSmxZV04wTGxCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lDQWdJQ0JvYjNabGNsTmxiR1ZqZERvZ1VtVmhZM1F1VUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ0lDQWdJR2x1Y0hWMFZtRnNkV1U2SUZKbFlXTjBMbEJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ0lDQWdJRzl3ZEdsdmJuTTZJRkpsWVdOMExsQnliM0JVZVhCbGN5NWhjbkpoZVN4Y2JpQWdJQ0FnSUNBZ2NHeGhZMlZvYjJ4a1pYSTZJRkpsWVdOMExsQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnSUNBZ0lHOXVRMmhoYm1kbE9pQlNaV0ZqZEM1UWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQWdJQ0FnYjI1TFpYbEViM2R1T2lCU1pXRmpkQzVRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNBZ0lDQWdiMjVMWlhsUWNtVnpjem9nVW1WaFkzUXVVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnSUNBZ0lHOXVTMlY1VlhBNklGSmxZV04wTGxCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lDQWdJQ0J2YmtadlkzVnpPaUJTWldGamRDNVFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0FnSUNBZ2IyNUNiSFZ5T2lCU1pXRmpkQzVRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNBZ0lDQWdiMjVUWld4bFkzUTZJRkpsWVdOMExsQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJQ0FnSUNCdmJrbHVjSFYwUTJ4cFkyczZJRkpsWVdOMExsQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJQ0FnSUNCb1lXNWtiR1ZJYVc1ME9pQlNaV0ZqZEM1UWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQWdJQ0FnYjI1RGIyMXdiR1YwWlRvZ1VtVmhZM1F1VUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ0lDQWdJRzl1VDNCMGFXOXVRMnhwWTJzNklGSmxZV04wTGxCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lDQWdJQ0J2Yms5d2RHbHZia05vWVc1blpUb2dVbVZoWTNRdVVISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdJQ0FnSUc5dVJISnZjR1J2ZDI1UGNHVnVPaUJTWldGamRDNVFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0FnSUNBZ2IyNUVjbTl3Wkc5M2JrTnNiM05sT2lCU1pXRmpkQzVRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNBZ0lDQWdiM0IwYVc5dVZHVnRjR3hoZEdVNklGSmxZV04wTGxCeWIzQlVlWEJsY3k1bWRXNWpMbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdJQ0FnSUdkbGRFMWxjM05oWjJWR2IzSlBjSFJwYjI0NklGSmxZV04wTGxCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lDQWdJQ0JuWlhSTlpYTnpZV2RsUm05eVNXNWpiMjFwYm1kUGNIUnBiMjV6T2lCU1pXRmpkQzVRY205d1ZIbHdaWE11Wm5WdVkxeHVJQ0FnSUgwc1hHNWNiaUFnSUNCblpYUkVaV1poZFd4MFVISnZjSE02SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsT2lBbkp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGMzUmxaRU5zWVhOelRtRnRaVG9nSnljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm5CMWRGWmhiSFZsT2lBbkp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk02SUZ0ZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYUc5MlpYSlRaV3hsWTNRNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZia1p2WTNWek9pQnViMjl3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVMWlhsRWIzZHVPaUJ1YjI5d0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1RGFHRnVaMlU2SUc1dmIzQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrbHVjSFYwUTJ4cFkyczZJRzV2YjNBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvWVc1a2JHVklhVzUwT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0p5YzdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1UGNIUnBiMjVEYkdsamF6b2dibTl2Y0N4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzl1VDNCMGFXOXVRMmhoYm1kbE9pQnViMjl3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVEYjIxd2JHVjBaVG9nSUc1dmIzQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrUnliM0JrYjNkdVQzQmxiam9nYm05dmNDeGNiaUFnSUNBZ0lDQWdJQ0FnSUc5dVJISnZjR1J2ZDI1RGJHOXpaVG9nYm05dmNDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdkbGRFMWxjM05oWjJWR2IzSlBjSFJwYjI0NklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQW5KenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCblpYUk5aWE56WVdkbFJtOXlTVzVqYjIxcGJtZFBjSFJwYjI1ek9pQm1kVzVqZEdsdmJpaHVkVzFpWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1ZFcxaVpYSWdLeUFuSUhOMVoyZGxjM1JwYjI1eklHRnlaU0JoZG1GcGJHRmliR1V1SUZWelpTQjFjQ0JoYm1RZ1pHOTNiaUJoY25KdmQzTWdkRzhnYzJWc1pXTjBMaWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0I5TEZ4dVhHNGdJQ0FnWjJWMFNXNXBkR2xoYkZOMFlYUmxPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sYkdWamRHVmtTVzVrWlhnNklDMHhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FYTklhVzUwVm1semFXSnNaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCcGMwUnliM0JrYjNkdVZtbHphV0pzWlRvZ1ptRnNjMlZjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWTI5dGNHOXVaVzUwVjJsc2JFMXZkVzUwT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5MGFHbHpJRDBnZEdocGN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhWdWFYRjFaVWxrSUQwZ2RHaHBjeTVqYjI1emRISjFZM1J2Y2k1blpYUkpibk4wWVc1alpVTnZkVzUwS0NrN1hHNWNiaUFnSUNBZ0lDQWdYM1JvYVhNdWRYTmxja2x1Y0hWMFZtRnNkV1VnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NXdjbVYyYVc5MWMwbHVjSFYwVm1Gc2RXVWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1aFkzUnBkbVZFWlhOalpXNWtZVzUwU1dRZ1BTQW5jbVZoWTNRdGRIbHdaV0ZvWldGa0xXRmpkR2wyWldSbGMyTmxibVJoYm5RdEp5QXJJSFZ1YVhGMVpVbGtPMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NXZjSFJwYjI1elNXUWdQU0FuY21WaFkzUXRkSGx3WldGb1pXRmtMVzl3ZEdsdmJuTXRKeUFySUhWdWFYRjFaVWxrTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JqYjIxd2IyNWxiblJFYVdSTmIzVnVkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJoWkdSRmRtVnVkQ0E5SUhkcGJtUnZkeTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FHRnVaR3hsVjJsdVpHOTNRMnh2YzJVZ1BTQjBhR2x6TG1oaGJtUnNaVmRwYm1SdmQwTnNiM05sTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRlJvWlNCZ1ptOWpkWE5nSUdWMlpXNTBJR1J2WlhNZ2JtOTBJR0oxWW1Kc1pTd2djMjhnZDJVZ2JYVnpkQ0JqWVhCMGRYSmxJR2wwSUdsdWMzUmxZV1F1WEc0Z0lDQWdJQ0FnSUM4dklGUm9hWE1nWTJ4dmMyVnpJRlI1Y0dWaGFHVmhaQ2R6SUdSeWIzQmtiM2R1SUhkb1pXNWxkbVZ5SUhOdmJXVjBhR2x1WnlCbGJITmxJR2RoYVc1eklHWnZZM1Z6TGx4dUlDQWdJQ0FnSUNCaFpHUkZkbVZ1ZENnblptOWpkWE1uTENCb1lXNWtiR1ZYYVc1a2IzZERiRzl6WlN3Z2RISjFaU2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdTV1lnZDJVZ1kyeHBZMnNnWVc1NWQyaGxjbVVnYjNWMGMybGtaU0J2WmlCVWVYQmxZV2hsWVdRc0lHTnNiM05sSUhSb1pTQmtjbTl3Wkc5M2JpNWNiaUFnSUNBZ0lDQWdZV1JrUlhabGJuUW9KMk5zYVdOckp5d2dhR0Z1Wkd4bFYybHVaRzkzUTJ4dmMyVXNJR1poYkhObEtUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1kyOXRjRzl1Wlc1MFYybHNiRlZ1Ylc5MWJuUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdjbVZ0YjNabFJYWmxiblFnUFNCM2FXNWtiM2N1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2hoYm1Sc1pWZHBibVJ2ZDBOc2IzTmxJRDBnZEdocGN5NW9ZVzVrYkdWWGFXNWtiM2REYkc5elpUdGNibHh1SUNBZ0lDQWdJQ0J5WlcxdmRtVkZkbVZ1ZENnblptOWpkWE1uTENCb1lXNWtiR1ZYYVc1a2IzZERiRzl6WlN3Z2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUhKbGJXOTJaVVYyWlc1MEtDZGpiR2xqYXljc0lHaGhibVJzWlZkcGJtUnZkME5zYjNObExDQm1ZV3h6WlNrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdOdmJYQnZibVZ1ZEZkcGJHeFNaV05sYVhabFVISnZjSE02SUdaMWJtTjBhVzl1S0c1bGVIUlFjbTl3Y3lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYm1WNGRGWmhiSFZsSUQwZ2JtVjRkRkJ5YjNCekxtbHVjSFYwVm1Gc2RXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYaDBUM0IwYVc5dWN5QTlJRzVsZUhSUWNtOXdjeTV2Y0hScGIyNXpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1ZNWlc1bmRHZ2dQU0J1WlhoMFZtRnNkV1V1YkdWdVozUm9MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FYTklhVzUwVm1semFXSnNaU0E5SUhaaGJIVmxUR1Z1WjNSb0lENGdNQ0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFRWdkbWx6YVdKc1pTQndZWEowSUc5bUlIUm9aU0JvYVc1MElHMTFjM1FnWW1WY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QmhkbUZwYkdGaWJHVWdabTl5SUhWeklIUnZJR052YlhCc1pYUmxJR2wwTGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGVIUlFjbTl3Y3k1b1lXNWtiR1ZJYVc1MEtHNWxlSFJXWVd4MVpTd2dibVY0ZEU5d2RHbHZibk1wTG5Oc2FXTmxLSFpoYkhWbFRHVnVaM1JvS1M1c1pXNW5kR2dnUGlBd08xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVM1JoZEdVb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhOSWFXNTBWbWx6YVdKc1pUb2dhWE5JYVc1MFZtbHphV0pzWlZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2NtVnVaR1Z5T2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1BHUnBkbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wZVd4bFBYdDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdmMybDBhVzl1T2lBbmNtVnNZWFJwZG1VblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlleWR5WldGamRDMTBlWEJsWVdobFlXUXRZMjl1ZEdGcGJtVnlJQ2NnS3lCZmRHaHBjeTV3Y205d2N5NWpiR0Z6YzA1aGJXVjlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRmZEdocGN5NXlaVzVrWlhKSmJuQjFkQ2dwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0ZmRHaHBjeTV5Wlc1a1pYSkVjbTl3Wkc5M2JpZ3BmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRmZEdocGN5NXlaVzVrWlhKQmNtbGhUV1Z6YzJGblpVWnZjazl3ZEdsdmJuTW9LWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3WDNSb2FYTXVjbVZ1WkdWeVFYSnBZVTFsYzNOaFoyVkdiM0pKYm1OdmJXbHVaMDl3ZEdsdmJuTW9LWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCeVpXNWtaWEpKYm5CMWREb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkR0YwWlNBOUlGOTBhR2x6TG5OMFlYUmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZjSE1nUFNCZmRHaHBjeTV3Y205d2N5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdsdWNIVjBWbUZzZFdVZ1BTQndjbTl3Y3k1cGJuQjFkRlpoYkhWbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsSUQwZ0ozSmxZV04wTFhSNWNHVmhhR1ZoWkMxcGJuQjFkQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibkIxZEVScGNtVmpkR2x2YmlBOUlHZGxkRlJsZUhSRWFYSmxZM1JwYjI0b2FXNXdkWFJXWVd4MVpTazdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lEeGthWFpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEhsc1pUMTdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2IzTnBkR2x2YmpvZ0ozSmxiR0YwYVhabEoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQU2R5WldGamRDMTBlWEJsWVdobFlXUXRhVzV3ZFhRdFkyOXVkR0ZwYm1WeUp6NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThTVzV3ZFhSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR2x6WVdKc1pXUTllM1J5ZFdWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEp2YkdVOUozQnlaWE5sYm5SaGRHbHZiaWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYSnBZUzFvYVdSa1pXNDllM1J5ZFdWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwY2oxN2FXNXdkWFJFYVhKbFkzUnBiMjU5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMTdZMnhoYzNOT1lXMWxJQ3NnSnlCeVpXRmpkQzEwZVhCbFlXaGxZV1F0YUdsdWRDY2dLeUJmZEdocGN5NXdjbTl3Y3k1dVpYTjBaV1JEYkdGemMwNWhiV1Y5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBlV3hsUFh0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyeHZjam9nSjNOcGJIWmxjaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JYWldKcmFYUlVaWGgwUm1sc2JFTnZiRzl5T2lBbmMybHNkbVZ5Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdmMybDBhVzl1T2lBbllXSnpiMngxZEdVblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsUFh0emRHRjBaUzVwYzBocGJuUldhWE5wWW14bElEOGdjSEp2Y0hNdWFHRnVaR3hsU0dsdWRDaHBibkIxZEZaaGJIVmxMQ0J3Y205d2N5NXZjSFJwYjI1ektTQTZJRzUxYkd4OVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThTVzV3ZFhSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZtUFNkcGJuQjFkQ2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtOXNaVDBuWTI5dFltOWliM2duWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnlhV0V0YjNkdWN6MTdYM1JvYVhNdWIzQjBhVzl1YzBsa2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21saExXVjRjR0Z1WkdWa1BYdHpkR0YwWlM1cGMwUnliM0JrYjNkdVZtbHphV0pzWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEpwWVMxaGRYUnZZMjl0Y0d4bGRHVTlKMkp2ZEdnblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5YVdFdFlXTjBhWFpsWkdWelkyVnVaR0Z1ZEQxN1gzUm9hWE11WVdOMGFYWmxSR1Z6WTJWdVpHRnVkRWxrZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlQxN2FXNXdkWFJXWVd4MVpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNCbGJHeERhR1ZqYXoxN1ptRnNjMlY5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRjFkRzlEYjIxd2JHVjBaVDE3Wm1Gc2MyVjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGMWRHOURiM0p5WldOMFBYdG1ZV3h6WlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR2x5UFh0cGJuQjFkRVJwY21WamRHbHZibjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyNURiR2xqYXoxN1gzUm9hWE11YUdGdVpHeGxRMnhwWTJ0OVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1Um05amRYTTllMTkwYUdsekxtaGhibVJzWlVadlkzVnpmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJrSnNkWEk5ZTNCeWIzQnpMbTl1UW14MWNuMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjI1RGFHRnVaMlU5ZTE5MGFHbHpMbWhoYm1Sc1pVTm9ZVzVuWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVMWlhsRWIzZHVQWHRmZEdocGN5NW9ZVzVrYkdWTFpYbEViM2R1ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaRDE3Y0hKdmNITXVhVzV3ZFhSSlpIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUMTdjSEp2Y0hNdWFXNXdkWFJPWVcxbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoZFhSdlJtOWpkWE05ZTNCeWIzQnpMbUYxZEc5R2IyTjFjMzFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHeGhZMlZvYjJ4a1pYSTllM0J5YjNCekxuQnNZV05sYUc5c1pHVnlmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJsTmxiR1ZqZEQxN2NISnZjSE11YjI1VFpXeGxZM1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVTMlY1VlhBOWUzQnliM0J6TG05dVMyVjVWWEI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVTMlY1VUhKbGMzTTllM0J5YjNCekxtOXVTMlY1VUhKbGMzTjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN1kyeGhjM05PWVcxbElDc2dKeUJ5WldGamRDMTBlWEJsWVdobFlXUXRkWE5sY25SbGVIUW5JQ3NnWDNSb2FYTXVjSEp2Y0hNdWJtVnpkR1ZrUTJ4aGMzTk9ZVzFsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkSGxzWlQxN2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHOXphWFJwYjI0NklDZHlaV3hoZEdsMlpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZV05yWjNKdmRXNWtPaUFuZEhKaGJuTndZWEpsYm5RblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnlaVzVrWlhKRWNtOXdaRzkzYmpvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCemRHRjBaU0E5SUY5MGFHbHpMbk4wWVhSbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNITWdQU0JmZEdocGN5NXdjbTl3Y3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJRTl3ZEdsdmJsUmxiWEJzWVhSbElEMGdjSEp2Y0hNdWIzQjBhVzl1VkdWdGNHeGhkR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaV3hsWTNSbFpFbHVaR1Y0SUQwZ2MzUmhkR1V1YzJWc1pXTjBaV1JKYm1SbGVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdselJISnZjR1J2ZDI1V2FYTnBZbXhsSUQwZ2MzUmhkR1V1YVhORWNtOXdaRzkzYmxacGMybGliR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhZM1JwZG1WRVpYTmpaVzVrWVc1MFNXUWdQU0JmZEdocGN5NWhZM1JwZG1WRVpYTmpaVzVrWVc1MFNXUTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Y0hKdmNITXViM0IwYVc5dWN5NXNaVzVuZEdnZ1BDQXhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4ZFd3Z2FXUTllMTkwYUdsekxtOXdkR2x2Ym5OSlpIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV1k5SjJSeWIzQmtiM2R1SjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKdmJHVTlKMnhwYzNSaWIzZ25YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEpwWVMxb2FXUmtaVzQ5ZXlGcGMwUnliM0JrYjNkdVZtbHphV0pzWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRIbHNaVDE3ZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhV1IwYURvZ0p6RXdNQ1VuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlZV05yWjNKdmRXNWtPaUFuSTJabVppY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdmMybDBhVzl1T2lBbllXSnpiMngxZEdVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpYjNoVGFYcHBibWM2SUNkaWIzSmtaWEl0WW05NEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdsemNHeGhlVG9nYVhORWNtOXdaRzkzYmxacGMybGliR1VnUHlBbllteHZZMnNuSURvZ0oyNXZibVVuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOUozSmxZV04wTFhSNWNHVmhhR1ZoWkMxdmNIUnBiMjV6SjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVRXOTFjMlZQZFhROWUzUm9hWE11YUdGdVpHeGxUVzkxYzJWUGRYUjlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjSE11YjNCMGFXOXVjeTV0WVhBb1puVnVZM1JwYjI0b1pHRjBZU3dnYVc1a1pYZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCcGMxTmxiR1ZqZEdWa0lEMGdjMlZzWldOMFpXUkpibVJsZUNBOVBUMGdhVzVrWlhnN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR3hwSUdsa1BYdHBjMU5sYkdWamRHVmtJRDhnWVdOMGFYWmxSR1Z6WTJWdVpHRnVkRWxrSURvZ2JuVnNiSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEpwWVMxelpXeGxZM1JsWkQxN2FYTlRaV3hsWTNSbFpIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtOXNaVDBuYjNCMGFXOXVKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJaWGs5ZTJsdVpHVjRmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZia05zYVdOclBYdGZkR2hwY3k1b1lXNWtiR1ZQY0hScGIyNURiR2xqYXk1aWFXNWtLRjkwYUdsekxDQnBibVJsZUNsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVRXOTFjMlZQZG1WeVBYdGZkR2hwY3k1b1lXNWtiR1ZQY0hScGIyNU5iM1Z6WlU5MlpYSXVZbWx1WkNoZmRHaHBjeXdnYVc1a1pYZ3BmVDVjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4VDNCMGFXOXVWR1Z0Y0d4aGRHVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdFOWUyUmhkR0Y5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlRDE3YVc1a1pYaDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYzJWeVNXNXdkWFJXWVd4MVpUMTdYM1JvYVhNdWRYTmxja2x1Y0hWMFZtRnNkV1Y5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJuQjFkRlpoYkhWbFBYdHdjbTl3Y3k1cGJuQjFkRlpoYkhWbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWE5UWld4bFkzUmxaRDE3YVhOVFpXeGxZM1JsWkgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMnhwUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThMM1ZzUGx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCeVpXNWtaWEpCY21saFRXVnpjMkZuWlVadmNrOXdkR2x2Ym5NNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZjSE1nUFNCZmRHaHBjeTV3Y205d2N5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdsdWNIVjBWbUZzZFdVZ1BTQndjbTl3Y3k1cGJuQjFkRlpoYkhWbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYjNCMGFXOXVJRDBnY0hKdmNITXViM0IwYVc5dWMxdGZkR2hwY3k1emRHRjBaUzV6Wld4bFkzUmxaRWx1WkdWNFhTQjhmQ0JwYm5CMWRGWmhiSFZsTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4UVhKcFlWTjBZWFIxYzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlU5ZTNCeWIzQnpMbWRsZEUxbGMzTmhaMlZHYjNKUGNIUnBiMjRvYjNCMGFXOXVLU0I4ZkNCcGJuQjFkRlpoYkhWbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2NtVnVaR1Z5UVhKcFlVMWxjM05oWjJWR2IzSkpibU52YldsdVowOXdkR2x2Ym5NNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NISnZjSE1nUFNCMGFHbHpMbkJ5YjNCek8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBOFFYSnBZVk4wWVhSMWMxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJVOWUzQnliM0J6TG1kbGRFMWxjM05oWjJWR2IzSkpibU52YldsdVowOXdkR2x2Ym5Nb2NISnZjSE11YjNCMGFXOXVjeTVzWlc1bmRHZ3BmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdjMmh2ZDBSeWIzQmtiM2R1T2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lWOTBhR2x6TG5OMFlYUmxMbWx6UkhKdmNHUnZkMjVXYVhOcFlteGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1elpYUlRkR0YwWlNoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FYTkVjbTl3Wkc5M2JsWnBjMmxpYkdVNklIUnlkV1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbkJ5YjNCekxtOXVSSEp2Y0dSdmQyNVBjR1Z1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCb2FXUmxSSEp2Y0dSdmQyNDZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hmZEdocGN5NXpkR0YwWlM1cGMwUnliM0JrYjNkdVZtbHphV0pzWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVjMlYwVTNSaGRHVW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x6UkhKdmNHUnZkMjVXYVhOcFlteGxPaUJtWVd4elpWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWNISnZjSE11YjI1RWNtOXdaRzkzYmtOc2IzTmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J6YUc5M1NHbHVkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3Y205d2N5QTlJRjkwYUdsekxuQnliM0J6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhVzV3ZFhSV1lXeDFaU0E5SUhCeWIzQnpMbWx1Y0hWMFZtRnNkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibkIxZEZaaGJIVmxUR1Z1WjNSb0lEMGdhVzV3ZFhSV1lXeDFaUzVzWlc1bmRHZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNCcGMwaHBiblJXYVhOcFlteGxJRDBnYVc1d2RYUldZV3gxWlV4bGJtZDBhQ0ErSURBZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJCSUhacGMybGliR1VnY0dGeWRDQnZaaUIwYUdVZ2FHbHVkQ0J0ZFhOMElHSmxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWVhaaGFXeGhZbXhsSUdadmNpQjFjeUIwYnlCamIyMXdiR1YwWlNCcGRDNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTl3Y3k1b1lXNWtiR1ZJYVc1MEtHbHVjSFYwVm1Gc2RXVXNJSEJ5YjNCekxtOXdkR2x2Ym5NcExuTnNhV05sS0dsdWNIVjBWbUZzZFdWTVpXNW5kR2dwTG14bGJtZDBhQ0ErSURBN1hHNWNiaUFnSUNBZ0lDQWdYM1JvYVhNdWMyVjBVM1JoZEdVb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhOSWFXNTBWbWx6YVdKc1pUb2dhWE5JYVc1MFZtbHphV0pzWlZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2FHbGtaVWhwYm5RNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRk4wWVhSbEtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdselNHbHVkRlpwYzJsaWJHVTZJR1poYkhObFhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnpaWFJUWld4bFkzUmxaRWx1WkdWNE9pQm1kVzVqZEdsdmJpaHBibVJsZUN3Z1kyRnNiR0poWTJzcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUlRkR0YwWlNoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bFkzUmxaRWx1WkdWNE9pQnBibVJsZUZ4dUlDQWdJQ0FnSUNCOUxDQmpZV3hzWW1GamF5azdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHaGhibVJzWlVOb1lXNW5aVG9nWm5WdVkzUnBiMjRvWlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJQ0FnSUNCZmRHaHBjeTV6YUc5M1NHbHVkQ2dwTzF4dUlDQWdJQ0FnSUNCZmRHaHBjeTV6YUc5M1JISnZjR1J2ZDI0b0tUdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdWMyVjBVMlZzWldOMFpXUkpibVJsZUNndE1TazdYRzRnSUNBZ0lDQWdJRjkwYUdsekxuQnliM0J6TG05dVEyaGhibWRsS0dWMlpXNTBLVHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVkWE5sY2tsdWNIVjBWbUZzZFdVZ1BTQmxkbVZ1ZEM1MFlYSm5aWFF1ZG1Gc2RXVTdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHWnZZM1Z6T2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpXWnpMbWx1Y0hWMExtZGxkRVJQVFU1dlpHVW9LUzVtYjJOMWN5Z3BPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQm9ZVzVrYkdWR2IyTjFjem9nWm5WdVkzUnBiMjRvWlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJQ0FnSUNCZmRHaHBjeTV6YUc5M1JISnZjR1J2ZDI0b0tUdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdWNISnZjSE11YjI1R2IyTjFjeWhsZG1WdWRDazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHaGhibVJzWlVOc2FXTnJPaUJtZFc1amRHbHZiaWhsZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbk5vYjNkSWFXNTBLQ2s3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbkJ5YjNCekxtOXVTVzV3ZFhSRGJHbGpheWhsZG1WdWRDazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHNWhkbWxuWVhSbE9pQm1kVzVqZEdsdmJpaGthWEpsWTNScGIyNHNJR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRhVzVKYm1SbGVDQTlJQzB4TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiV0Y0U1c1a1pYZ2dQU0JmZEdocGN5NXdjbTl3Y3k1dmNIUnBiMjV6TG14bGJtZDBhQ0F0SURFc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm1SbGVDQTlJRjkwYUdsekxuTjBZWFJsTG5ObGJHVmpkR1ZrU1c1a1pYZ2dLeUJrYVhKbFkzUnBiMjQ3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x1WkdWNElENGdiV0Y0U1c1a1pYZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0SUQwZ2JXbHVTVzVrWlhnN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9hVzVrWlhnZ1BDQnRhVzVKYm1SbGVDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGdnUFNCdFlYaEpibVJsZUR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJRjkwYUdsekxuTmxkRk5sYkdWamRHVmtTVzVrWlhnb2FXNWtaWGdzSUdOaGJHeGlZV05yS1R0Y2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnYUdGdVpHeGxTMlY1Ukc5M2Jqb2dablZ1WTNScGIyNG9aWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5MGFHbHpJRDBnZEdocGN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUd0bGVTQTlJR1YyWlc1MExtdGxlU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnliM0J6SUQwZ1gzUm9hWE11Y0hKdmNITXNYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJuQjFkQ0E5SUY5MGFHbHpMbkpsWm5NdWFXNXdkWFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBjMFJ5YjNCa2IzZHVWbWx6YVdKc1pTQTlJRjkwYUdsekxuTjBZWFJsTG1selJISnZjR1J2ZDI1V2FYTnBZbXhsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhWE5JYVc1MFZtbHphV0pzWlNBOUlGOTBhR2x6TG5OMFlYUmxMbWx6U0dsdWRGWnBjMmxpYkdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvWVhOSVlXNWtiR1ZrUzJWNVJHOTNiaUE5SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZjSFJwYjI1RVlYUmhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHbHlPMXh1WEc0Z0lDQWdJQ0FnSUhOM2FYUmphQ0FvYTJWNUtTQjdYRzRnSUNBZ0lDQWdJR05oYzJVZ0owVnVaQ2M2WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKMVJoWWljNlhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FYTklhVzUwVm1semFXSnNaU0FtSmlBaFpYWmxiblF1YzJocFpuUkxaWGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGRtVnVkQzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCekxtOXVRMjl0Y0d4bGRHVW9aWFpsYm5Rc0lIQnliM0J6TG1oaGJtUnNaVWhwYm5Rb2NISnZjSE11YVc1d2RYUldZV3gxWlN3Z2NISnZjSE11YjNCMGFXOXVjeWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKMEZ5Y205M1RHVm1kQ2M2WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKMEZ5Y205M1VtbG5hSFFuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dselNHbHVkRlpwYzJsaWJHVWdKaVlnSVdWMlpXNTBMbk5vYVdaMFMyVjVJQ1ltSUdsdWNIVjBMbWx6UTNWeWMyOXlRWFJGYm1Rb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwY2lBOUlHZGxkRlJsZUhSRWFYSmxZM1JwYjI0b2NISnZjSE11YVc1d2RYUldZV3gxWlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvS0dScGNpQTlQVDBnSjJ4MGNpY2dKaVlnYTJWNUlEMDlQU0FuUVhKeWIzZFNhV2RvZENjcElIeDhJQ2hrYVhJZ1BUMDlJQ2R5ZEd3bklDWW1JR3RsZVNBOVBUMGdKMEZ5Y205M1RHVm1kQ2NwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCekxtOXVRMjl0Y0d4bGRHVW9aWFpsYm5Rc0lIQnliM0J6TG1oaGJtUnNaVWhwYm5Rb2NISnZjSE11YVc1d2RYUldZV3gxWlN3Z2NISnZjSE11YjNCMGFXOXVjeWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCallYTmxJQ2RGYm5SbGNpYzZYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVtYjJOMWN5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11YUdsa1pVaHBiblFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtaHBaR1ZFY205d1pHOTNiaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnSjBWelkyRndaU2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1b2FXUmxTR2x1ZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVhR2xrWlVSeWIzQmtiM2R1S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdZMkZ6WlNBblFYSnliM2RWY0NjNlhHNGdJQ0FnSUNBZ0lHTmhjMlVnSjBGeWNtOTNSRzkzYmljNlhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NISnZjSE11YjNCMGFXOXVjeTVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYWmxiblF1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbk5vYjNkSWFXNTBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVjMmh2ZDBSeWIzQmtiM2R1S0NrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYVhORWNtOXdaRzkzYmxacGMybGliR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR2x5SUQwZ2EyVjVJRDA5UFNBblFYSnliM2RWY0NjZ1B5QXRNVG9nTVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR0Z6U0dGdVpHeGxaRXRsZVVSdmQyNGdQU0IwY25WbE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbTVoZG1sbllYUmxLR1JwY2l3Z1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzJWc1pXTjBaV1JKYm1SbGVDQTlJRjkwYUdsekxuTjBZWFJsTG5ObGJHVmpkR1ZrU1c1a1pYZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKbGRtbHZkWE5KYm5CMWRGWmhiSFZsSUQwZ1gzUm9hWE11Y0hKbGRtbHZkWE5KYm5CMWRGWmhiSFZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXdkR2x2YmtSaGRHRWdQU0J3Y21WMmFXOTFjMGx1Y0hWMFZtRnNkV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzQjBhVzl1VDJabWMyVjBWRzl3SUQwZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bFkzUmxaRTl3ZEdsdmJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrY205d1pHOTNianRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1YyVW5jbVVnWTNWeWNtVnVkR3g1SUc5dUlHRnVJRzl3ZEdsdmJpNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6Wld4bFkzUmxaRWx1WkdWNElENDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJUWVhabElIUm9aU0JqZFhKeVpXNTBJR0JwYm5CMWRHQWdkbUZzZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWVhNZ2QyVWdiV2xuYUhRZ1lYSnliM2NnWW1GamF5QjBieUJwZENCc1lYUmxjaTVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jSEpsZG1sdmRYTkpibkIxZEZaaGJIVmxJRDA5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxuQnlaWFpwYjNWelNXNXdkWFJXWVd4MVpTQTlJSEJ5YjNCekxtbHVjSFYwVm1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiM0IwYVc5dVJHRjBZU0E5SUhCeWIzQnpMbTl3ZEdsdmJuTmJjMlZzWldOMFpXUkpibVJsZUYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVFdGclpTQnpaV3hsWTNSbFpDQnZjSFJwYjI0Z1lXeDNZWGx6SUhOamNtOXNiQ0IwYnlCMmFYTnBZbXhsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pISnZjR1J2ZDI0Z1BTQlNaV0ZqZEM1bWFXNWtSRTlOVG05a1pTaGZkR2hwY3k1eVpXWnpMbVJ5YjNCa2IzZHVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpXeGxZM1JsWkU5d2RHbHZiaUE5SUdSeWIzQmtiM2R1TG1Ob2FXeGtjbVZ1VzNObGJHVmpkR1ZrU1c1a1pYaGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5d2RHbHZiazltWm5ObGRGUnZjQ0E5SUhObGJHVmpkR1ZrVDNCMGFXOXVMbTltWm5ObGRGUnZjRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppaHZjSFJwYjI1UFptWnpaWFJVYjNBZ0t5QnpaV3hsWTNSbFpFOXdkR2x2Ymk1amJHbGxiblJJWldsbmFIUWdQaUJrY205d1pHOTNiaTVqYkdsbGJuUklaV2xuYUhRZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzQjBhVzl1VDJabWMyVjBWRzl3SUR3Z1pISnZjR1J2ZDI0dWMyTnliMnhzVkc5d0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnliM0JrYjNkdUxuTmpjbTlzYkZSdmNDQTlJRzl3ZEdsdmJrOW1abk5sZEZSdmNEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWIzQnpMbTl1VDNCMGFXOXVRMmhoYm1kbEtHVjJaVzUwTENCdmNIUnBiMjVFWVhSaExDQnpaV3hsWTNSbFpFbHVaR1Y0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWIzQnpMbTl1UzJWNVJHOTNiaWhsZG1WdWRDd2diM0IwYVc5dVJHRjBZU3dnYzJWc1pXTjBaV1JKYm1SbGVDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9JV2hoYzBoaGJtUnNaV1JMWlhsRWIzZHVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibVJsZUNBOUlIUm9hWE11YzNSaGRHVXVjMlZzWldOMFpXUkpibVJsZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJrUmhkR0VnUFNCcGJtUmxlQ0E4SURBZ1B5QndjbTl3Y3k1cGJuQjFkRlpoYkhWbElEb2djSEp2Y0hNdWIzQjBhVzl1YzF0cGJtUmxlRjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbTl3Y3k1dmJrdGxlVVJ2ZDI0b1pYWmxiblFzSUc5d2RHbHZia1JoZEdFc0lHbHVaR1Y0S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCb1lXNWtiR1ZQY0hScGIyNURiR2xqYXpvZ1puVnVZM1JwYjI0b2MyVnNaV04wWldSSmJtUmxlQ3dnWlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnliM0J6SUQwZ1gzUm9hWE11Y0hKdmNITTdYRzVjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVabTlqZFhNb0tUdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdWFHbGtaVWhwYm5Rb0tUdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdWFHbGtaVVJ5YjNCa2IzZHVLQ2s3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbk5sZEZObGJHVmpkR1ZrU1c1a1pYZ29jMlZzWldOMFpXUkpibVJsZUNrN1hHNGdJQ0FnSUNBZ0lIQnliM0J6TG05dVQzQjBhVzl1UTJ4cFkyc29aWFpsYm5Rc0lIQnliM0J6TG05d2RHbHZibk5iYzJWc1pXTjBaV1JKYm1SbGVGMHNJSE5sYkdWamRHVmtTVzVrWlhncE8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCb1lXNWtiR1ZQY0hScGIyNU5iM1Z6WlU5MlpYSTZJR1oxYm1OMGFXOXVLSE5sYkdWamRHVmtTVzVrWlhncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lDQWdJQ0JwWmlBb1gzUm9hWE11Y0hKdmNITXVhRzkyWlhKVFpXeGxZM1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxuTmxkRk5sYkdWamRHVmtTVzVrWlhnb2MyVnNaV04wWldSSmJtUmxlQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnYUdGdVpHeGxUVzkxYzJWUGRYUTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hmZEdocGN5NXdjbTl3Y3k1b2IzWmxjbE5sYkdWamRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11YzJWMFUyVnNaV04wWldSSmJtUmxlQ2d0TVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ2FHRnVaR3hsVjJsdVpHOTNRMnh2YzJVNklHWjFibU4wYVc5dUtHVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwWVhKblpYUWdQU0JsZG1WdWRDNTBZWEpuWlhRN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSaGNtZGxkQ0FoUFQwZ2QybHVaRzkzSUNZbUlDRjBhR2x6TG1kbGRFUlBUVTV2WkdVb0tTNWpiMjUwWVdsdWN5aDBZWEpuWlhRcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVvYVdSbFNHbHVkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWFHbGtaVVJ5YjNCa2IzZHVLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1OUtUdGNiaUpkZlE9PSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL3R5cGVhaGVhZC5qc3gnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJUTENoYXJhY3RlcnNSZWdFeHAgPSByZXF1aXJlKCcuL3J0bF9jaGFyc19yZWdleHAnKSxcbiAgICBOZXV0cmFsQ2hhcmFjdGVyc1JlZ0V4cCA9IHJlcXVpcmUoJy4vbmV1dHJhbF9jaGFyc19yZWdleHAnKSxcbiAgICBzdGFydHNXaXRoUlRMID0gbmV3IFJlZ0V4cCgnXig/OicgKyBOZXV0cmFsQ2hhcmFjdGVyc1JlZ0V4cCArICcpKig/OicgKyBSVExDaGFyYWN0ZXJzUmVnRXhwICsgJyknKSxcbiAgICBuZXV0cmFsVGV4dCA9IG5ldyBSZWdFeHAoJ14oPzonICsgTmV1dHJhbENoYXJhY3RlcnNSZWdFeHAgKyAnKSokJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGV4dCkge1xuICAgIHZhciBkaXIgPSAnbHRyJztcblxuICAgIGlmIChzdGFydHNXaXRoUlRMLnRlc3QodGV4dCkpIHtcbiAgICAgICAgZGlyID0gJ3J0bCc7XG4gICAgfSBlbHNlIGlmIChuZXV0cmFsVGV4dC50ZXN0KHRleHQpKSB7XG4gICAgICAgIGRpciA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpcjtcbn07XG4iLCIvLyBETyBOT1QgRURJVCFcbi8vIFRISVMgRklMRSBJUyBHRU5FUkFURUQhXG5cbi8vIEFsbCBiaWRpIGNoYXJhY3RlcnMgZXhjZXB0IHRob3NlIGZvdW5kIGluIGNsYXNzZXMgJ0wnIChMVFIpLCAnUicgKFJUTCksIGFuZCAnQUwnIChSVEwgQXJhYmljKSBhcyBwZXIgVW5pY29kZSA3LjAuMC5cblxuLy8ganNoaW50IGlnbm9yZTpzdGFydFxuLy8ganNjczpkaXNhYmxlIG1heGltdW1MaW5lTGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9ICdbXFwwLUBcXFstYFxcey1cXHhBOVxceEFCLVxceEI0XFx4QjYtXFx4QjlcXHhCQi1cXHhCRlxceEQ3XFx4RjdcXHUwMkI5XFx1MDJCQVxcdTAyQzItXFx1MDJDRlxcdTAyRDItXFx1MDJERlxcdTAyRTUtXFx1MDJFRFxcdTAyRUYtXFx1MDM2RlxcdTAzNzRcXHUwMzc1XFx1MDM3RVxcdTAzODRcXHUwMzg1XFx1MDM4N1xcdTAzRjZcXHUwNDgzLVxcdTA0ODlcXHUwNThBXFx1MDU4RC1cXHUwNThGXFx1MDU5MS1cXHUwNUJEXFx1MDVCRlxcdTA1QzFcXHUwNUMyXFx1MDVDNFxcdTA1QzVcXHUwNUM3XFx1MDYwMC1cXHUwNjA3XFx1MDYwOVxcdTA2MEFcXHUwNjBDXFx1MDYwRS1cXHUwNjFBXFx1MDY0Qi1cXHUwNjZDXFx1MDY3MFxcdTA2RDYtXFx1MDZFNFxcdTA2RTctXFx1MDZFRFxcdTA2RjAtXFx1MDZGOVxcdTA3MTFcXHUwNzMwLVxcdTA3NEFcXHUwN0E2LVxcdTA3QjBcXHUwN0VCLVxcdTA3RjNcXHUwN0Y2LVxcdTA3RjlcXHUwODE2LVxcdTA4MTlcXHUwODFCLVxcdTA4MjNcXHUwODI1LVxcdTA4MjdcXHUwODI5LVxcdTA4MkRcXHUwODU5LVxcdTA4NUJcXHUwOEU0LVxcdTA5MDJcXHUwOTNBXFx1MDkzQ1xcdTA5NDEtXFx1MDk0OFxcdTA5NERcXHUwOTUxLVxcdTA5NTdcXHUwOTYyXFx1MDk2M1xcdTA5ODFcXHUwOUJDXFx1MDlDMS1cXHUwOUM0XFx1MDlDRFxcdTA5RTJcXHUwOUUzXFx1MDlGMlxcdTA5RjNcXHUwOUZCXFx1MEEwMVxcdTBBMDJcXHUwQTNDXFx1MEE0MVxcdTBBNDJcXHUwQTQ3XFx1MEE0OFxcdTBBNEItXFx1MEE0RFxcdTBBNTFcXHUwQTcwXFx1MEE3MVxcdTBBNzVcXHUwQTgxXFx1MEE4MlxcdTBBQkNcXHUwQUMxLVxcdTBBQzVcXHUwQUM3XFx1MEFDOFxcdTBBQ0RcXHUwQUUyXFx1MEFFM1xcdTBBRjFcXHUwQjAxXFx1MEIzQ1xcdTBCM0ZcXHUwQjQxLVxcdTBCNDRcXHUwQjREXFx1MEI1NlxcdTBCNjJcXHUwQjYzXFx1MEI4MlxcdTBCQzBcXHUwQkNEXFx1MEJGMy1cXHUwQkZBXFx1MEMwMFxcdTBDM0UtXFx1MEM0MFxcdTBDNDYtXFx1MEM0OFxcdTBDNEEtXFx1MEM0RFxcdTBDNTVcXHUwQzU2XFx1MEM2MlxcdTBDNjNcXHUwQzc4LVxcdTBDN0VcXHUwQzgxXFx1MENCQ1xcdTBDQ0NcXHUwQ0NEXFx1MENFMlxcdTBDRTNcXHUwRDAxXFx1MEQ0MS1cXHUwRDQ0XFx1MEQ0RFxcdTBENjJcXHUwRDYzXFx1MERDQVxcdTBERDItXFx1MERENFxcdTBERDZcXHUwRTMxXFx1MEUzNC1cXHUwRTNBXFx1MEUzRlxcdTBFNDctXFx1MEU0RVxcdTBFQjFcXHUwRUI0LVxcdTBFQjlcXHUwRUJCXFx1MEVCQ1xcdTBFQzgtXFx1MEVDRFxcdTBGMThcXHUwRjE5XFx1MEYzNVxcdTBGMzdcXHUwRjM5LVxcdTBGM0RcXHUwRjcxLVxcdTBGN0VcXHUwRjgwLVxcdTBGODRcXHUwRjg2XFx1MEY4N1xcdTBGOEQtXFx1MEY5N1xcdTBGOTktXFx1MEZCQ1xcdTBGQzZcXHUxMDJELVxcdTEwMzBcXHUxMDMyLVxcdTEwMzdcXHUxMDM5XFx1MTAzQVxcdTEwM0RcXHUxMDNFXFx1MTA1OFxcdTEwNTlcXHUxMDVFLVxcdTEwNjBcXHUxMDcxLVxcdTEwNzRcXHUxMDgyXFx1MTA4NVxcdTEwODZcXHUxMDhEXFx1MTA5RFxcdTEzNUQtXFx1MTM1RlxcdTEzOTAtXFx1MTM5OVxcdTE0MDBcXHUxNjgwXFx1MTY5QlxcdTE2OUNcXHUxNzEyLVxcdTE3MTRcXHUxNzMyLVxcdTE3MzRcXHUxNzUyXFx1MTc1M1xcdTE3NzJcXHUxNzczXFx1MTdCNFxcdTE3QjVcXHUxN0I3LVxcdTE3QkRcXHUxN0M2XFx1MTdDOS1cXHUxN0QzXFx1MTdEQlxcdTE3RERcXHUxN0YwLVxcdTE3RjlcXHUxODAwLVxcdTE4MEVcXHUxOEE5XFx1MTkyMC1cXHUxOTIyXFx1MTkyN1xcdTE5MjhcXHUxOTMyXFx1MTkzOS1cXHUxOTNCXFx1MTk0MFxcdTE5NDRcXHUxOTQ1XFx1MTlERS1cXHUxOUZGXFx1MUExN1xcdTFBMThcXHUxQTFCXFx1MUE1NlxcdTFBNTgtXFx1MUE1RVxcdTFBNjBcXHUxQTYyXFx1MUE2NS1cXHUxQTZDXFx1MUE3My1cXHUxQTdDXFx1MUE3RlxcdTFBQjAtXFx1MUFCRVxcdTFCMDAtXFx1MUIwM1xcdTFCMzRcXHUxQjM2LVxcdTFCM0FcXHUxQjNDXFx1MUI0MlxcdTFCNkItXFx1MUI3M1xcdTFCODBcXHUxQjgxXFx1MUJBMi1cXHUxQkE1XFx1MUJBOFxcdTFCQTlcXHUxQkFCLVxcdTFCQURcXHUxQkU2XFx1MUJFOFxcdTFCRTlcXHUxQkVEXFx1MUJFRi1cXHUxQkYxXFx1MUMyQy1cXHUxQzMzXFx1MUMzNlxcdTFDMzdcXHUxQ0QwLVxcdTFDRDJcXHUxQ0Q0LVxcdTFDRTBcXHUxQ0UyLVxcdTFDRThcXHUxQ0VEXFx1MUNGNFxcdTFDRjhcXHUxQ0Y5XFx1MURDMC1cXHUxREY1XFx1MURGQy1cXHUxREZGXFx1MUZCRFxcdTFGQkYtXFx1MUZDMVxcdTFGQ0QtXFx1MUZDRlxcdTFGREQtXFx1MUZERlxcdTFGRUQtXFx1MUZFRlxcdTFGRkRcXHUxRkZFXFx1MjAwMC1cXHUyMDBEXFx1MjAxMC1cXHUyMDI5XFx1MjAyRi1cXHUyMDY0XFx1MjA2OFxcdTIwNkEtXFx1MjA3MFxcdTIwNzQtXFx1MjA3RVxcdTIwODAtXFx1MjA4RVxcdTIwQTAtXFx1MjBCRFxcdTIwRDAtXFx1MjBGMFxcdTIxMDBcXHUyMTAxXFx1MjEwMy1cXHUyMTA2XFx1MjEwOFxcdTIxMDlcXHUyMTE0XFx1MjExNi1cXHUyMTE4XFx1MjExRS1cXHUyMTIzXFx1MjEyNVxcdTIxMjdcXHUyMTI5XFx1MjEyRVxcdTIxM0FcXHUyMTNCXFx1MjE0MC1cXHUyMTQ0XFx1MjE0QS1cXHUyMTREXFx1MjE1MC1cXHUyMTVGXFx1MjE4OVxcdTIxOTAtXFx1MjMzNVxcdTIzN0ItXFx1MjM5NFxcdTIzOTYtXFx1MjNGQVxcdTI0MDAtXFx1MjQyNlxcdTI0NDAtXFx1MjQ0QVxcdTI0NjAtXFx1MjQ5QlxcdTI0RUEtXFx1MjZBQlxcdTI2QUQtXFx1MjdGRlxcdTI5MDAtXFx1MkI3M1xcdTJCNzYtXFx1MkI5NVxcdTJCOTgtXFx1MkJCOVxcdTJCQkQtXFx1MkJDOFxcdTJCQ0EtXFx1MkJEMVxcdTJDRTUtXFx1MkNFQVxcdTJDRUYtXFx1MkNGMVxcdTJDRjktXFx1MkNGRlxcdTJEN0ZcXHUyREUwLVxcdTJFNDJcXHUyRTgwLVxcdTJFOTlcXHUyRTlCLVxcdTJFRjNcXHUyRjAwLVxcdTJGRDVcXHUyRkYwLVxcdTJGRkJcXHUzMDAwLVxcdTMwMDRcXHUzMDA4LVxcdTMwMjBcXHUzMDJBLVxcdTMwMkRcXHUzMDMwXFx1MzAzNlxcdTMwMzdcXHUzMDNELVxcdTMwM0ZcXHUzMDk5LVxcdTMwOUNcXHUzMEEwXFx1MzBGQlxcdTMxQzAtXFx1MzFFM1xcdTMyMURcXHUzMjFFXFx1MzI1MC1cXHUzMjVGXFx1MzI3Qy1cXHUzMjdFXFx1MzJCMS1cXHUzMkJGXFx1MzJDQy1cXHUzMkNGXFx1MzM3Ny1cXHUzMzdBXFx1MzNERVxcdTMzREZcXHUzM0ZGXFx1NERDMC1cXHU0REZGXFx1QTQ5MC1cXHVBNEM2XFx1QTYwRC1cXHVBNjBGXFx1QTY2Ri1cXHVBNjdGXFx1QTY5RlxcdUE2RjBcXHVBNkYxXFx1QTcwMC1cXHVBNzIxXFx1QTc4OFxcdUE4MDJcXHVBODA2XFx1QTgwQlxcdUE4MjVcXHVBODI2XFx1QTgyOC1cXHVBODJCXFx1QTgzOFxcdUE4MzlcXHVBODc0LVxcdUE4NzdcXHVBOEM0XFx1QThFMC1cXHVBOEYxXFx1QTkyNi1cXHVBOTJEXFx1QTk0Ny1cXHVBOTUxXFx1QTk4MC1cXHVBOTgyXFx1QTlCM1xcdUE5QjYtXFx1QTlCOVxcdUE5QkNcXHVBOUU1XFx1QUEyOS1cXHVBQTJFXFx1QUEzMVxcdUFBMzJcXHVBQTM1XFx1QUEzNlxcdUFBNDNcXHVBQTRDXFx1QUE3Q1xcdUFBQjBcXHVBQUIyLVxcdUFBQjRcXHVBQUI3XFx1QUFCOFxcdUFBQkVcXHVBQUJGXFx1QUFDMVxcdUFBRUNcXHVBQUVEXFx1QUFGNlxcdUFCRTVcXHVBQkU4XFx1QUJFRFxcdUZCMUVcXHVGQjI5XFx1RkQzRVxcdUZEM0ZcXHVGREZEXFx1RkUwMC1cXHVGRTE5XFx1RkUyMC1cXHVGRTJEXFx1RkUzMC1cXHVGRTUyXFx1RkU1NC1cXHVGRTY2XFx1RkU2OC1cXHVGRTZCXFx1RkVGRlxcdUZGMDEtXFx1RkYyMFxcdUZGM0ItXFx1RkY0MFxcdUZGNUItXFx1RkY2NVxcdUZGRTAtXFx1RkZFNlxcdUZGRTgtXFx1RkZFRVxcdUZGRjktXFx1RkZGRF18XFx1RDgwMFtcXHVERDAxXFx1REQ0MC1cXHVERDhDXFx1REQ5MC1cXHVERDlCXFx1RERBMFxcdURERkRcXHVERUUwLVxcdURFRkJcXHVERjc2LVxcdURGN0FdfFxcdUQ4MDJbXFx1REQxRlxcdURFMDEtXFx1REUwM1xcdURFMDVcXHVERTA2XFx1REUwQy1cXHVERTBGXFx1REUzOC1cXHVERTNBXFx1REUzRlxcdURFRTVcXHVERUU2XFx1REYzOS1cXHVERjNGXXxcXHVEODAzW1xcdURFNjAtXFx1REU3RV18W1xcdUQ4MDRcXHVEQjQwXVtcXHVEQzAxXFx1REMzOC1cXHVEQzQ2XFx1REM1Mi1cXHVEQzY1XFx1REM3Ri1cXHVEQzgxXFx1RENCMy1cXHVEQ0I2XFx1RENCOVxcdURDQkFcXHVERDAwLVxcdUREMDJcXHVERDI3LVxcdUREMkJcXHVERDJELVxcdUREMzRcXHVERDczXFx1REQ4MFxcdUREODFcXHVEREI2LVxcdUREQkVcXHVERTJGLVxcdURFMzFcXHVERTM0XFx1REUzNlxcdURFMzdcXHVERURGXFx1REVFMy1cXHVERUVBXFx1REYwMVxcdURGM0NcXHVERjQwXFx1REY2Ni1cXHVERjZDXFx1REY3MC1cXHVERjc0XXxcXHVEODA1W1xcdURDQjMtXFx1RENCOFxcdURDQkFcXHVEQ0JGXFx1RENDMFxcdURDQzJcXHVEQ0MzXFx1RERCMi1cXHVEREI1XFx1RERCQ1xcdUREQkRcXHVEREJGXFx1RERDMFxcdURFMzMtXFx1REUzQVxcdURFM0RcXHVERTNGXFx1REU0MFxcdURFQUJcXHVERUFEXFx1REVCMC1cXHVERUI1XFx1REVCN118XFx1RDgxQVtcXHVERUYwLVxcdURFRjRcXHVERjMwLVxcdURGMzZdfFxcdUQ4MUJbXFx1REY4Ri1cXHVERjkyXXxcXHVEODJGW1xcdURDOURcXHVEQzlFXFx1RENBMC1cXHVEQ0EzXXxcXHVEODM0W1xcdURENjctXFx1REQ2OVxcdURENzMtXFx1REQ4MlxcdUREODUtXFx1REQ4QlxcdUREQUEtXFx1RERBRFxcdURFMDAtXFx1REU0NVxcdURGMDAtXFx1REY1Nl18XFx1RDgzNVtcXHVERURCXFx1REYxNVxcdURGNEZcXHVERjg5XFx1REZDM1xcdURGQ0UtXFx1REZGRl18XFx1RDgzQVtcXHVEQ0QwLVxcdURDRDZdfFxcdUQ4M0JbXFx1REVGMFxcdURFRjFdfFxcdUQ4M0NbXFx1REMwMC1cXHVEQzJCXFx1REMzMC1cXHVEQzkzXFx1RENBMC1cXHVEQ0FFXFx1RENCMS1cXHVEQ0JGXFx1RENDMS1cXHVEQ0NGXFx1RENEMS1cXHVEQ0Y1XFx1REQwMC1cXHVERDBDXFx1REQ2QVxcdURENkJcXHVERjAwLVxcdURGMkNcXHVERjMwLVxcdURGN0RcXHVERjgwLVxcdURGQ0VcXHVERkQ0LVxcdURGRjddfFxcdUQ4M0RbXFx1REMwMC1cXHVEQ0ZFXFx1REQwMC1cXHVERDRBXFx1REQ1MC1cXHVERDc5XFx1REQ3Qi1cXHVEREEzXFx1RERBNS1cXHVERTQyXFx1REU0NS1cXHVERUNGXFx1REVFMC1cXHVERUVDXFx1REVGMC1cXHVERUYzXFx1REYwMC1cXHVERjczXFx1REY4MC1cXHVERkQ0XXxcXHVEODNFW1xcdURDMDAtXFx1REMwQlxcdURDMTAtXFx1REM0N1xcdURDNTAtXFx1REM1OVxcdURDNjAtXFx1REM4N1xcdURDOTAtXFx1RENBRF0nO1xuLy8ganNjczplbmFibGUgbWF4aW11bUxpbmVMZW5ndGhcbi8vIGpzaGludCBpZ25vcmU6ZW5kXG4iLCIvLyBETyBOT1QgRURJVCFcbi8vIFRISVMgRklMRSBJUyBHRU5FUkFURUQhXG5cbi8vIEFsbCBiaWRpIGNoYXJhY3RlcnMgZm91bmQgaW4gY2xhc3NlcyAnUicsICdBTCcsICdSTEUnLCAnUkxPJywgYW5kICdSTEknIGFzIHBlciBVbmljb2RlIDcuMC4wLlxuXG4vLyBqc2hpbnQgaWdub3JlOnN0YXJ0XG4vLyBqc2NzOmRpc2FibGUgbWF4aW11bUxpbmVMZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gJ1tcXHUwNUJFXFx1MDVDMFxcdTA1QzNcXHUwNUM2XFx1MDVEMC1cXHUwNUVBXFx1MDVGMC1cXHUwNUY0XFx1MDYwOFxcdTA2MEJcXHUwNjBEXFx1MDYxQlxcdTA2MUNcXHUwNjFFLVxcdTA2NEFcXHUwNjZELVxcdTA2NkZcXHUwNjcxLVxcdTA2RDVcXHUwNkU1XFx1MDZFNlxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNzBEXFx1MDcwRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDMC1cXHUwN0VBXFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODE1XFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDgzMC1cXHUwODNFXFx1MDg0MC1cXHUwODU4XFx1MDg1RVxcdTA4QTAtXFx1MDhCMlxcdTIwMEZcXHUyMDJCXFx1MjAyRVxcdTIwNjdcXHVGQjFEXFx1RkIxRi1cXHVGQjI4XFx1RkIyQS1cXHVGQjM2XFx1RkIzOC1cXHVGQjNDXFx1RkIzRVxcdUZCNDBcXHVGQjQxXFx1RkI0M1xcdUZCNDRcXHVGQjQ2LVxcdUZCQzFcXHVGQkQzLVxcdUZEM0RcXHVGRDUwLVxcdUZEOEZcXHVGRDkyLVxcdUZEQzdcXHVGREYwLVxcdUZERkNcXHVGRTcwLVxcdUZFNzRcXHVGRTc2LVxcdUZFRkNdfFxcdUQ4MDJbXFx1REMwMC1cXHVEQzA1XFx1REMwOFxcdURDMEEtXFx1REMzNVxcdURDMzdcXHVEQzM4XFx1REMzQ1xcdURDM0YtXFx1REM1NVxcdURDNTctXFx1REM5RVxcdURDQTctXFx1RENBRlxcdUREMDAtXFx1REQxQlxcdUREMjAtXFx1REQzOVxcdUREM0ZcXHVERDgwLVxcdUREQjdcXHVEREJFXFx1RERCRlxcdURFMDBcXHVERTEwLVxcdURFMTNcXHVERTE1LVxcdURFMTdcXHVERTE5LVxcdURFMzNcXHVERTQwLVxcdURFNDdcXHVERTUwLVxcdURFNThcXHVERTYwLVxcdURFOUZcXHVERUMwLVxcdURFRTRcXHVERUVCLVxcdURFRjZcXHVERjAwLVxcdURGMzVcXHVERjQwLVxcdURGNTVcXHVERjU4LVxcdURGNzJcXHVERjc4LVxcdURGOTFcXHVERjk5LVxcdURGOUNcXHVERkE5LVxcdURGQUZdfFxcdUQ4MDNbXFx1REMwMC1cXHVEQzQ4XXxcXHVEODNBW1xcdURDMDAtXFx1RENDNFxcdURDQzctXFx1RENDRl18XFx1RDgzQltcXHVERTAwLVxcdURFMDNcXHVERTA1LVxcdURFMUZcXHVERTIxXFx1REUyMlxcdURFMjRcXHVERTI3XFx1REUyOS1cXHVERTMyXFx1REUzNC1cXHVERTM3XFx1REUzOVxcdURFM0JcXHVERTQyXFx1REU0N1xcdURFNDlcXHVERTRCXFx1REU0RC1cXHVERTRGXFx1REU1MVxcdURFNTJcXHVERTU0XFx1REU1N1xcdURFNTlcXHVERTVCXFx1REU1RFxcdURFNUZcXHVERTYxXFx1REU2MlxcdURFNjRcXHVERTY3LVxcdURFNkFcXHVERTZDLVxcdURFNzJcXHVERTc0LVxcdURFNzdcXHVERTc5LVxcdURFN0NcXHVERTdFXFx1REU4MC1cXHVERTg5XFx1REU4Qi1cXHVERTlCXFx1REVBMS1cXHVERUEzXFx1REVBNS1cXHVERUE5XFx1REVBQi1cXHVERUJCXSc7XG4vLyBqc2NzOmVuYWJsZSBtYXhpbXVtTGluZUxlbmd0aFxuLy8ganNoaW50IGlnbm9yZTplbmRcbiJdfQ==
